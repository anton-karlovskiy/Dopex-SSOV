{
  "address": "0x29037DCe9fF2EB848403a090C7d4EbE4d8D6320F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ssov",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vbnb",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_strikeIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_strikeIndices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "depositMultiple",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_strikeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "purchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ssov",
      "outputs": [
        {
          "internalType": "contract IERC20SSOV",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vbnb",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xead15f054108bb1f3fdf0a7574cb24dcecef3d3347b3c18c8169d027af0a09ca",
  "receipt": {
    "to": null,
    "from": "0xDe485812E28824e542B9c2270B6b8eD9232B7D0b",
    "contractAddress": "0x29037DCe9fF2EB848403a090C7d4EbE4d8D6320F",
    "transactionIndex": 81,
    "gasUsed": "1019705",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x13ac0e1217049a3a2d7632fa54aca6a271f776eb09126ca72526838b5f56a424",
    "transactionHash": "0xead15f054108bb1f3fdf0a7574cb24dcecef3d3347b3c18c8169d027af0a09ca",
    "logs": [],
    "blockNumber": 14316387,
    "cumulativeGasUsed": "9121606",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x43a5cfB83d0DEcAaead90E0CC6DCA60A2405442B",
    "0xa07c5b74c9b40447a954e1466938b865b6bbea36"
  ],
  "numDeployments": 1,
  "solcInputHash": "450a94a1d9dad975029872e8b2b81bcb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ssov\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vbnb\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_strikeIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_strikeIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"depositMultiple\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_strikeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ssov\",\"outputs\":[{\"internalType\":\"contract IERC20SSOV\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vbnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_ssov\":\"address of SSOV\",\"_vbnb\":\"VBNB address\"}},\"deposit(uint256,address)\":{\"params\":{\"_strikeIndex\":\"Index of strike\",\"_to\":\"Address of the user to deposit for\"},\"returns\":{\"_0\":\"Whether deposit was successful\"}},\"depositMultiple(uint256[],uint256[],address)\":{\"params\":{\"_amounts\":\"Amount of BNB to deposit into each strike index\",\"_strikeIndices\":\"Indices of strikes to deposit into\",\"_to\":\"Address of the user to deposit for\"},\"returns\":{\"_0\":\"Whether deposits went through successfully\"}},\"purchase(uint256,uint256,address)\":{\"params\":{\"_amount\":\"Amount of calls to purchase\",\"_strikeIndex\":\"Strike index for current epoch\",\"_to\":\"User to purchase options for\"},\"returns\":{\"_0\":\"Whether purchase was successful\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"deposit(uint256,address)\":{\"notice\":\"Deposits BNB into the ssov to mint options in the next epoch for selected strikes\"},\"depositMultiple(uint256[],uint256[],address)\":{\"notice\":\"Deposit BNB multiple times into different strike\"},\"purchase(uint256,uint256,address)\":{\"notice\":\"Purchases calls for the current epoch\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/router/BnbSSOVRouter.sol\":\"BnbSSOVRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29c462775f5b4c76dce400f120f3530aa3f81da42c839f975dc2b64784d22434\",\"license\":\"MIT\"},\"contracts/external/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * NOTE: Modified to include symbols and decimals.\\n */\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x8a99c98bc4e6ba9f3de4745a15ff7828c5ddb08ed2befd62f395e12a6ebf067c\",\"license\":\"UNLICENSED\"},\"contracts/external/interfaces/IVBNB.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IVBNB {\\n    function mint() external payable;\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7d1d4ec5c42ba55bec5ba04f43ca3f48dc7210fe8477e34c14d07f8c2eddf6e4\",\"license\":\"UNLICENSED\"},\"contracts/external/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from '../interfaces/IERC20.sol';\\nimport {SafeMath} from '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            'SafeERC20: approve from non-zero to non-zero allowance'\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(\\n            value\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            'SafeERC20: decreased allowance below zero'\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            'SafeERC20: low-level call failed'\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                'SafeERC20: ERC20 operation did not succeed'\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x93f47d25474b00533fb8a2589aaabe366bf44107bc28486154ef9564776a9142\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20SSOV.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {ISSOV} from './ISSOV.sol';\\n\\ninterface IERC20SSOV is ISSOV {\\n    function purchase(\\n        uint256 strikeIndex,\\n        uint256 amount,\\n        address user\\n    ) external returns (uint256, uint256);\\n\\n    function deposit(\\n        uint256 strikeIndex,\\n        uint256 amount,\\n        address user\\n    ) external returns (bool);\\n\\n    function depositMultiple(\\n        uint256[] memory strikeIndices,\\n        uint256[] memory amounts,\\n        address user\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4924e507a828dce22726ce3df8e6251d7546b12f6f1277ff67b99f31455ccbba\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISSOV.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface ISSOV {\\n    function epochStrikeTokens(uint256 epoch, uint256 strike)\\n        external\\n        view\\n        returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function currentEpoch() external view returns (uint256);\\n\\n    function epochStrikes(uint256 epoch, uint256 strikeIndex)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function settle(\\n        uint256 strikeIndex,\\n        uint256 amount,\\n        uint256 epoch\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x00b6acc16914e836a8d44bc25bb3ac182410e32fb3cee0c7c4a8858b2af3cf96\",\"license\":\"UNLICENSED\"},\"contracts/router/BnbSSOVRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport {SafeERC20} from '../external/libraries/SafeERC20.sol';\\n\\n// Interfaces\\nimport {IERC20} from '../external/interfaces/IERC20.sol';\\nimport {IVBNB} from '../external/interfaces/IVBNB.sol';\\nimport {IERC20SSOV} from '../interfaces/IERC20SSOV.sol';\\n\\ncontract BnbSSOVRouter {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20SSOV public immutable ssov;\\n    address public immutable vbnb;\\n\\n    /// @notice Constructor\\n    /// @param _ssov address of SSOV\\n    /// @param _vbnb VBNB address\\n    constructor(address _ssov, address _vbnb) {\\n        ssov = IERC20SSOV(_ssov);\\n        vbnb = _vbnb;\\n    }\\n\\n    receive() external payable {}\\n\\n    /// @notice Purchases calls for the current epoch\\n    /// @param _strikeIndex Strike index for current epoch\\n    /// @param _amount Amount of calls to purchase\\n    /// @param _to User to purchase options for\\n    /// @return Whether purchase was successful\\n    function purchase(\\n        uint256 _strikeIndex,\\n        uint256 _amount,\\n        address _to\\n    ) external payable returns (uint256, uint256) {\\n        IVBNB(vbnb).mint{value: msg.value}();\\n        uint256 vbnbAmount = IERC20(vbnb).balanceOf(address(this));\\n        IERC20(address(vbnb)).safeIncreaseAllowance(address(ssov), vbnbAmount);\\n        (uint256 premium, uint256 totalFee) = ssov.purchase(\\n            _strikeIndex,\\n            _amount,\\n            _to\\n        );\\n        _transferLeftoverBalance();\\n        return (premium, totalFee);\\n    }\\n\\n    /// @notice Deposits BNB into the ssov to mint options in the next epoch for selected strikes\\n    /// @param _strikeIndex Index of strike\\n    /// @param _to Address of the user to deposit for\\n    /// @return Whether deposit was successful\\n    function deposit(uint256 _strikeIndex, address _to)\\n        external\\n        payable\\n        returns (bool)\\n    {\\n        IVBNB(vbnb).mint{value: msg.value}();\\n        uint256 vbnbAmount = IERC20(vbnb).balanceOf(address(this));\\n        IERC20(address(vbnb)).safeIncreaseAllowance(address(ssov), vbnbAmount);\\n        bool success = ssov.deposit(_strikeIndex, vbnbAmount, _to);\\n        _transferLeftoverBalance();\\n        return success;\\n    }\\n\\n    /// @notice Deposit BNB multiple times into different strike\\n    /// @param _strikeIndices Indices of strikes to deposit into\\n    /// @param _amounts Amount of BNB to deposit into each strike index\\n    /// @param _to Address of the user to deposit for\\n    /// @return Whether deposits went through successfully\\n    function depositMultiple(\\n        uint256[] calldata _strikeIndices,\\n        uint256[] calldata _amounts,\\n        address _to\\n    ) external payable returns (bool) {\\n        uint256 totalAmount;\\n        for (uint256 i = 0; i < _amounts.length; i++) {\\n            totalAmount += _amounts[i];\\n        }\\n        require(msg.value >= totalAmount, 'Invalid amount');\\n        IVBNB(vbnb).mint{value: msg.value}();\\n        uint256 vbnbAmount = IERC20(vbnb).balanceOf(address(this));\\n        uint256[] memory vbnbAmounts = new uint256[](_amounts.length);\\n        for (uint256 i = 0; i < _amounts.length; i++) {\\n            vbnbAmounts[i] = (vbnbAmount * _amounts[i]) / totalAmount;\\n        }\\n        IERC20(address(vbnb)).safeIncreaseAllowance(address(ssov), vbnbAmount);\\n        bool success = ssov.depositMultiple(_strikeIndices, vbnbAmounts, _to);\\n        _transferLeftoverBalance();\\n        return success;\\n    }\\n\\n    /// @notice transfer leftover balance to be used for premium\\n    function _transferLeftoverBalance() internal {\\n        uint256 vbnbBalance = IERC20(vbnb).balanceOf(address(this));\\n        if (vbnbBalance > 0) {\\n            require(IVBNB(vbnb).redeem(vbnbBalance) == 0, 'Redeem failed');\\n            uint256 bnbBalance = address(this).balance;\\n            if (bnbBalance > 0) {\\n                (bool success, ) = msg.sender.call{value: bnbBalance}('');\\n                require(success, 'Unable to send BNB');\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4b23f5e0703205ca5c37720704acb88eeae23fc40834e9bb45ee5f1df9ca3ea\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506040516112b53803806112b583398101604081905261002f91610062565b6001600160a01b039182166080521660a052610095565b80516001600160a01b038116811461005d57600080fd5b919050565b6000806040838503121561007557600080fd5b61007e83610046565b915061008c60208401610046565b90509250929050565b60805160a0516111856101306000396000818161011b01528181610141015281816101c90152818161025c015281816103f20152818161047a015281816105be015281816106ca01528181610752015281816107e5015281816109f40152610a9401526000818160a70152818161027e015281816102d3015281816105e00152818161061f01528181610807015261085e01526111856000f3fe60806040526004361061004e5760003560e01c80636e553f651461005a5780638144eeba146100825780638355fc5414610095578063ea3bd5df146100e1578063f6961bef1461010957600080fd5b3661005557005b600080fd5b61006d610068366004610dfc565b61013d565b60405190151581526020015b60405180910390f35b61006d610090366004610e74565b610363565b3480156100a157600080fd5b506100c97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610079565b6100f46100ef366004610ef5565b6106c5565b60408051928352602083019190915201610079565b34801561011557600080fd5b506100c97f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631249c58b346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561019a57600080fd5b505af11580156101ae573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506370a08231915060240160206040518083038186803b15801561021557600080fd5b505afa158015610229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024d9190610f2a565b90506102a36001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836108f2565b604051638dbdbe6d60e01b815260048101859052602481018290526001600160a01b0384811660448301526000917f000000000000000000000000000000000000000000000000000000000000000090911690638dbdbe6d90606401602060405180830381600087803b15801561031957600080fd5b505af115801561032d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103519190610f43565b905061035b6109dc565b949350505050565b60008060005b848110156103a95785858281811061038357610383610f65565b90506020020135826103959190610f91565b9150806103a181610fa9565b915050610369565b50803410156103f05760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b60448201526064015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631249c58b346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561044b57600080fd5b505af115801561045f573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506370a08231915060240160206040518083038186803b1580156104c657600080fd5b505afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe9190610f2a565b905060008567ffffffffffffffff81111561051b5761051b610fc4565b604051908082528060200260200182016040528015610544578160200160208202803683370190505b50905060005b868110156105b0578388888381811061056557610565610f65565b90506020020135846105779190610fda565b6105819190610ff9565b82828151811061059357610593610f65565b6020908102919091010152806105a881610fa9565b91505061054a565b506106056001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846108f2565b6040516340a2775d60e11b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638144eeba9061065a908d908d9087908c9060040161101b565b602060405180830381600087803b15801561067457600080fd5b505af1158015610688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ac9190610f43565b90506106b66109dc565b93505050505b95945050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631249c58b346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561072357600080fd5b505af1158015610737573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506370a08231915060240160206040518083038186803b15801561079e57600080fd5b505afa1580156107b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d69190610f2a565b905061082c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836108f2565b60405163ea3bd5df60e01b815260048101879052602481018690526001600160a01b03858116604483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063ea3bd5df906064016040805180830381600087803b1580156108a157600080fd5b505af11580156108b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d991906110b0565b915091506108e56109dc565b9097909650945050505050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000916109819184919087169063dd62ed3e9060440160206040518083038186803b15801561094357600080fd5b505afa158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b9190610f2a565b90610bf0565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790529091506109d6908590610c03565b50505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610a3e57600080fd5b505afa158015610a52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a769190610f2a565b90508015610bed5760405163db006a7560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063db006a7590602401602060405180830381600087803b158015610ae057600080fd5b505af1158015610af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b189190610f2a565b15610b555760405162461bcd60e51b815260206004820152600d60248201526c14995919595b4819985a5b1959609a1b60448201526064016103e7565b478015610beb57604051600090339083908381818185875af1925050503d8060008114610b9e576040519150601f19603f3d011682016040523d82523d6000602084013e610ba3565b606091505b5050905080610be95760405162461bcd60e51b81526020600482015260126024820152712ab730b13632903a379039b2b7321021272160711b60448201526064016103e7565b505b505b50565b6000610bfc8284610f91565b9392505050565b6000610c58826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610cd59092919063ffffffff16565b805190915015610be95780806020019051810190610c769190610f43565b610be95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103e7565b606061035b848460008585843b610d2e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103e7565b600080866001600160a01b03168587604051610d4a9190611100565b60006040518083038185875af1925050503d8060008114610d87576040519150601f19603f3d011682016040523d82523d6000602084013e610d8c565b606091505b5091509150610d9c828286610da7565b979650505050505050565b60608315610db6575081610bfc565b825115610dc65782518084602001fd5b8160405162461bcd60e51b81526004016103e7919061111c565b80356001600160a01b0381168114610df757600080fd5b919050565b60008060408385031215610e0f57600080fd5b82359150610e1f60208401610de0565b90509250929050565b60008083601f840112610e3a57600080fd5b50813567ffffffffffffffff811115610e5257600080fd5b6020830191508360208260051b8501011115610e6d57600080fd5b9250929050565b600080600080600060608688031215610e8c57600080fd5b853567ffffffffffffffff80821115610ea457600080fd5b610eb089838a01610e28565b90975095506020880135915080821115610ec957600080fd5b50610ed688828901610e28565b9094509250610ee9905060408701610de0565b90509295509295909350565b600080600060608486031215610f0a57600080fd5b8335925060208401359150610f2160408501610de0565b90509250925092565b600060208284031215610f3c57600080fd5b5051919050565b600060208284031215610f5557600080fd5b81518015158114610bfc57600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610fa457610fa4610f7b565b500190565b6000600019821415610fbd57610fbd610f7b565b5060010190565b634e487b7160e01b600052604160045260246000fd5b6000816000190483118215151615610ff457610ff4610f7b565b500290565b60008261101657634e487b7160e01b600052601260045260246000fd5b500490565b6060808252810184905260006001600160fb1b0385111561103b57600080fd5b8460051b808760808501378083019050608081016000815260206080858403018186015281875180845260a0850191508289019450600093505b808410156110955784518252938201936001939093019290820190611075565b506001600160a01b038716604087015293506106bc92505050565b600080604083850312156110c357600080fd5b505080516020909101519092909150565b60005b838110156110ef5781810151838201526020016110d7565b838111156109d65750506000910152565b600082516111128184602087016110d4565b9190910192915050565b602081526000825180602084015261113b8160408501602087016110d4565b601f01601f1916919091016040019291505056fea26469706673582212200aaccf67d145ea52512a358b008562a7d4afd05c54d87f31179c611a94c29fcf64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061004e5760003560e01c80636e553f651461005a5780638144eeba146100825780638355fc5414610095578063ea3bd5df146100e1578063f6961bef1461010957600080fd5b3661005557005b600080fd5b61006d610068366004610dfc565b61013d565b60405190151581526020015b60405180910390f35b61006d610090366004610e74565b610363565b3480156100a157600080fd5b506100c97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610079565b6100f46100ef366004610ef5565b6106c5565b60408051928352602083019190915201610079565b34801561011557600080fd5b506100c97f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631249c58b346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561019a57600080fd5b505af11580156101ae573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506370a08231915060240160206040518083038186803b15801561021557600080fd5b505afa158015610229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024d9190610f2a565b90506102a36001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836108f2565b604051638dbdbe6d60e01b815260048101859052602481018290526001600160a01b0384811660448301526000917f000000000000000000000000000000000000000000000000000000000000000090911690638dbdbe6d90606401602060405180830381600087803b15801561031957600080fd5b505af115801561032d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103519190610f43565b905061035b6109dc565b949350505050565b60008060005b848110156103a95785858281811061038357610383610f65565b90506020020135826103959190610f91565b9150806103a181610fa9565b915050610369565b50803410156103f05760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b60448201526064015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631249c58b346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561044b57600080fd5b505af115801561045f573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506370a08231915060240160206040518083038186803b1580156104c657600080fd5b505afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe9190610f2a565b905060008567ffffffffffffffff81111561051b5761051b610fc4565b604051908082528060200260200182016040528015610544578160200160208202803683370190505b50905060005b868110156105b0578388888381811061056557610565610f65565b90506020020135846105779190610fda565b6105819190610ff9565b82828151811061059357610593610f65565b6020908102919091010152806105a881610fa9565b91505061054a565b506106056001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846108f2565b6040516340a2775d60e11b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638144eeba9061065a908d908d9087908c9060040161101b565b602060405180830381600087803b15801561067457600080fd5b505af1158015610688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ac9190610f43565b90506106b66109dc565b93505050505b95945050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631249c58b346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561072357600080fd5b505af1158015610737573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506370a08231915060240160206040518083038186803b15801561079e57600080fd5b505afa1580156107b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d69190610f2a565b905061082c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836108f2565b60405163ea3bd5df60e01b815260048101879052602481018690526001600160a01b03858116604483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063ea3bd5df906064016040805180830381600087803b1580156108a157600080fd5b505af11580156108b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d991906110b0565b915091506108e56109dc565b9097909650945050505050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000916109819184919087169063dd62ed3e9060440160206040518083038186803b15801561094357600080fd5b505afa158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b9190610f2a565b90610bf0565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790529091506109d6908590610c03565b50505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610a3e57600080fd5b505afa158015610a52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a769190610f2a565b90508015610bed5760405163db006a7560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063db006a7590602401602060405180830381600087803b158015610ae057600080fd5b505af1158015610af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b189190610f2a565b15610b555760405162461bcd60e51b815260206004820152600d60248201526c14995919595b4819985a5b1959609a1b60448201526064016103e7565b478015610beb57604051600090339083908381818185875af1925050503d8060008114610b9e576040519150601f19603f3d011682016040523d82523d6000602084013e610ba3565b606091505b5050905080610be95760405162461bcd60e51b81526020600482015260126024820152712ab730b13632903a379039b2b7321021272160711b60448201526064016103e7565b505b505b50565b6000610bfc8284610f91565b9392505050565b6000610c58826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610cd59092919063ffffffff16565b805190915015610be95780806020019051810190610c769190610f43565b610be95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103e7565b606061035b848460008585843b610d2e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103e7565b600080866001600160a01b03168587604051610d4a9190611100565b60006040518083038185875af1925050503d8060008114610d87576040519150601f19603f3d011682016040523d82523d6000602084013e610d8c565b606091505b5091509150610d9c828286610da7565b979650505050505050565b60608315610db6575081610bfc565b825115610dc65782518084602001fd5b8160405162461bcd60e51b81526004016103e7919061111c565b80356001600160a01b0381168114610df757600080fd5b919050565b60008060408385031215610e0f57600080fd5b82359150610e1f60208401610de0565b90509250929050565b60008083601f840112610e3a57600080fd5b50813567ffffffffffffffff811115610e5257600080fd5b6020830191508360208260051b8501011115610e6d57600080fd5b9250929050565b600080600080600060608688031215610e8c57600080fd5b853567ffffffffffffffff80821115610ea457600080fd5b610eb089838a01610e28565b90975095506020880135915080821115610ec957600080fd5b50610ed688828901610e28565b9094509250610ee9905060408701610de0565b90509295509295909350565b600080600060608486031215610f0a57600080fd5b8335925060208401359150610f2160408501610de0565b90509250925092565b600060208284031215610f3c57600080fd5b5051919050565b600060208284031215610f5557600080fd5b81518015158114610bfc57600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610fa457610fa4610f7b565b500190565b6000600019821415610fbd57610fbd610f7b565b5060010190565b634e487b7160e01b600052604160045260246000fd5b6000816000190483118215151615610ff457610ff4610f7b565b500290565b60008261101657634e487b7160e01b600052601260045260246000fd5b500490565b6060808252810184905260006001600160fb1b0385111561103b57600080fd5b8460051b808760808501378083019050608081016000815260206080858403018186015281875180845260a0850191508289019450600093505b808410156110955784518252938201936001939093019290820190611075565b506001600160a01b038716604087015293506106bc92505050565b600080604083850312156110c357600080fd5b505080516020909101519092909150565b60005b838110156110ef5781810151838201526020016110d7565b838111156109d65750506000910152565b600082516111128184602087016110d4565b9190910192915050565b602081526000825180602084015261113b8160408501602087016110d4565b601f01601f1916919091016040019291505056fea26469706673582212200aaccf67d145ea52512a358b008562a7d4afd05c54d87f31179c611a94c29fcf64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_ssov": "address of SSOV",
          "_vbnb": "VBNB address"
        }
      },
      "deposit(uint256,address)": {
        "params": {
          "_strikeIndex": "Index of strike",
          "_to": "Address of the user to deposit for"
        },
        "returns": {
          "_0": "Whether deposit was successful"
        }
      },
      "depositMultiple(uint256[],uint256[],address)": {
        "params": {
          "_amounts": "Amount of BNB to deposit into each strike index",
          "_strikeIndices": "Indices of strikes to deposit into",
          "_to": "Address of the user to deposit for"
        },
        "returns": {
          "_0": "Whether deposits went through successfully"
        }
      },
      "purchase(uint256,uint256,address)": {
        "params": {
          "_amount": "Amount of calls to purchase",
          "_strikeIndex": "Strike index for current epoch",
          "_to": "User to purchase options for"
        },
        "returns": {
          "_0": "Whether purchase was successful"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor"
      },
      "deposit(uint256,address)": {
        "notice": "Deposits BNB into the ssov to mint options in the next epoch for selected strikes"
      },
      "depositMultiple(uint256[],uint256[],address)": {
        "notice": "Deposit BNB multiple times into different strike"
      },
      "purchase(uint256,uint256,address)": {
        "notice": "Purchases calls for the current epoch"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}