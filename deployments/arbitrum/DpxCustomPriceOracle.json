{
  "address": "0x252C07E0356d3B1a8cE273E39885b094053137b9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "updatePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4b1868dca8bbf6c63d0a320e9bded8dab34e9de14390d21c08ba5c1321fc70f6",
  "receipt": {
    "to": null,
    "from": "0xDe485812E28824e542B9c2270B6b8eD9232B7D0b",
    "contractAddress": "0x252C07E0356d3B1a8cE273E39885b094053137b9",
    "transactionIndex": 0,
    "gasUsed": "8732705",
    "logsBloom": "0x
    "blockHash": "0x978bccb1ed69e53007b3f6a413101e41c894bbbeb6272dc688f4124c4f0eb5d6",
    "transactionHash": "0x4b1868dca8bbf6c63d0a320e9bded8dab34e9de14390d21c08ba5c1321fc70f6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3677497,
        "transactionHash": "0x4b1868dca8bbf6c63d0a320e9bded8dab34e9de14390d21c08ba5c1321fc70f6",
        "address": "0x252C07E0356d3B1a8cE273E39885b094053137b9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000de485812e28824e542b9c2270b6b8ed9232b7d0b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x978bccb1ed69e53007b3f6a413101e41c894bbbeb6272dc688f4124c4f0eb5d6"
      }
    ],
    "blockNumber": 3677497,
    "cumulativeGasUsed": "6232145",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "db96b77978a7c02731df41a84f4c409b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPriceInUSD()\":{\"returns\":{\"_0\":\"price\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePrice(uint256)\":{\"params\":{\"price\":\"price\"},\"returns\":{\"_0\":\"price of the token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getPriceInUSD()\":{\"notice\":\"Gets the price of the token\"},\"updatePrice(uint256)\":{\"notice\":\"Updates the last price of the token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/DpxCustomPriceOracle.sol\":\"DpxCustomPriceOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"contracts/oracle/DpxCustomPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\n\\ncontract DpxCustomPriceOracle is Ownable {\\n    /*==== PUBLIC VARS ====*/\\n\\n    uint256 public lastPrice;\\n\\n    /*==== SETTER FUNCTIONS (ONLY OWNER) ====*/\\n\\n    /**\\n     * @notice Updates the last price of the token\\n     * @param price price\\n     * @return price of the token\\n     */\\n    function updatePrice(uint256 price) external onlyOwner returns (uint256) {\\n        require(price != 0, 'CustomPriceOracle: Token price cannot be 0');\\n\\n        lastPrice = price;\\n\\n        return price;\\n    }\\n\\n    /*==== VIEWS ====*/\\n\\n    /**\\n     * @notice Gets the price of the token\\n     * @return price\\n     */\\n    function getPriceInUSD() external view returns (uint256) {\\n        require(lastPrice != 0, 'CustomPriceOracle: Last price == 0');\\n\\n        return lastPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xe611aac77d8356f397b89800a96c638cbd413b601290830308d770bbadd12f64\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6103af8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063053f14da14610067578063715018a6146100835780638d6cc56d1461008d5780638da5cb5b146100a0578063e1aa6036146100bb578063f2fde38b146100c3575b600080fd5b61007060015481565b6040519081526020015b60405180910390f35b61008b6100d6565b005b61007061009b3660046102fb565b610115565b6000546040516001600160a01b03909116815260200161007a565b6100706101a9565b61008b6100d1366004610314565b610210565b6000546001600160a01b031633146101095760405162461bcd60e51b815260040161010090610344565b60405180910390fd5b61011360006102ab565b565b600080546001600160a01b031633146101405760405162461bcd60e51b815260040161010090610344565b816101a05760405162461bcd60e51b815260206004820152602a60248201527f437573746f6d50726963654f7261636c653a20546f6b656e20707269636520636044820152690616e6e6f7420626520360b41b6064820152608401610100565b50600181905590565b6000600154600014156102095760405162461bcd60e51b815260206004820152602260248201527f437573746f6d50726963654f7261636c653a204c617374207072696365203d3d604482015261020360f41b6064820152608401610100565b5060015490565b6000546001600160a01b0316331461023a5760405162461bcd60e51b815260040161010090610344565b6001600160a01b03811661029f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610100565b6102a8816102ab565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561030d57600080fd5b5035919050565b60006020828403121561032657600080fd5b81356001600160a01b038116811461033d57600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea2646970667358221220337ee1e6939380e00e4aaefbc7e13a5a3e7418cf9a7e4185f9032f96c05d950f64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063053f14da14610067578063715018a6146100835780638d6cc56d1461008d5780638da5cb5b146100a0578063e1aa6036146100bb578063f2fde38b146100c3575b600080fd5b61007060015481565b6040519081526020015b60405180910390f35b61008b6100d6565b005b61007061009b3660046102fb565b610115565b6000546040516001600160a01b03909116815260200161007a565b6100706101a9565b61008b6100d1366004610314565b610210565b6000546001600160a01b031633146101095760405162461bcd60e51b815260040161010090610344565b60405180910390fd5b61011360006102ab565b565b600080546001600160a01b031633146101405760405162461bcd60e51b815260040161010090610344565b816101a05760405162461bcd60e51b815260206004820152602a60248201527f437573746f6d50726963654f7261636c653a20546f6b656e20707269636520636044820152690616e6e6f7420626520360b41b6064820152608401610100565b50600181905590565b6000600154600014156102095760405162461bcd60e51b815260206004820152602260248201527f437573746f6d50726963654f7261636c653a204c617374207072696365203d3d604482015261020360f41b6064820152608401610100565b5060015490565b6000546001600160a01b0316331461023a5760405162461bcd60e51b815260040161010090610344565b6001600160a01b03811661029f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610100565b6102a8816102ab565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561030d57600080fd5b5035919050565b60006020828403121561032657600080fd5b81356001600160a01b038116811461033d57600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea2646970667358221220337ee1e6939380e00e4aaefbc7e13a5a3e7418cf9a7e4185f9032f96c05d950f64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPriceInUSD()": {
        "returns": {
          "_0": "price"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePrice(uint256)": {
        "params": {
          "price": "price"
        },
        "returns": {
          "_0": "price of the token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getPriceInUSD()": {
        "notice": "Gets the price of the token"
      },
      "updatePrice(uint256)": {
        "notice": "Updates the last price of the token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3344,
        "contract": "contracts/oracle/DpxCustomPriceOracle.sol:DpxCustomPriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 30568,
        "contract": "contracts/oracle/DpxCustomPriceOracle.sol:DpxCustomPriceOracle",
        "label": "lastPrice",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}