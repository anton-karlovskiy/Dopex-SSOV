{
  "address": "0xc4e63f3bE080d932f6d2d1ba1936Be72b37Fc134",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ethSsov",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dpxSsov",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dpx",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rdpx",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strikeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dpx",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dpxReceived",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dpxSsov",
      "outputs": [
        {
          "internalType": "contract ISSOV",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethSsov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDeposit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "pull",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dpxRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rdpxRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rdpx",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rdpxReceived",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dpxEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strikeIndex",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xffb0f2b18373154323694e238e4c16fdcf7a26f13f29ac39926bc49cae335d56",
  "receipt": {
    "to": null,
    "from": "0xDe485812E28824e542B9c2270B6b8eD9232B7D0b",
    "contractAddress": "0xc4e63f3bE080d932f6d2d1ba1936Be72b37Fc134",
    "transactionIndex": 0,
    "gasUsed": "35378204",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000802000000000000400000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000002000000000000000100000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd3bdb10ebe5a3b3cad9d92f246dd0f93e46a9a2c4a4f385a4a29554a3e2ad82c",
    "transactionHash": "0xffb0f2b18373154323694e238e4c16fdcf7a26f13f29ac39926bc49cae335d56",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4347808,
        "transactionHash": "0xffb0f2b18373154323694e238e4c16fdcf7a26f13f29ac39926bc49cae335d56",
        "address": "0xc4e63f3bE080d932f6d2d1ba1936Be72b37Fc134",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000de485812e28824e542b9c2270b6b8ed9232b7d0b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd3bdb10ebe5a3b3cad9d92f246dd0f93e46a9a2c4a4f385a4a29554a3e2ad82c"
      }
    ],
    "blockNumber": 4347808,
    "cumulativeGasUsed": "26912364",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x711Da677a0D61Ee855DAd4241B552A706F529C70",
    "0x48252eDBFCc8A27390827950ccFc1c00152894E3",
    "0x6c2c06790b3e3e3c38e12ee22f8183b37a13ee55",
    "0x32eb7902d4134bf98a28b963d26de779af92a212"
  ],
  "numDeployments": 1,
  "solcInputHash": "74a09ca61ff4aeb2ed6cd5e5f46cd5e4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethSsov\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dpxSsov\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dpx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rdpx\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strikeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dpx\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dpxReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dpxSsov\",\"outputs\":[{\"internalType\":\"contract ISSOV\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethSsov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pull\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dpxRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rdpxRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rdpx\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rdpxReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dpxEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikeIndex\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_dpx\":\"DPX token address\",\"_dpxSsov\":\"DPX SSOV address\",\"_ethSsov\":\"ETH SSOV address\",\"_rdpx\":\"rDPX token address\"}},\"deposit(uint256,uint256)\":{\"params\":{\"amount\":\"Amount of DPX rewards\",\"strikeIndex\":\"Strike index in the DPX ssov to deposit in\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pull(uint256,uint256,uint256,address)\":{\"params\":{\"epoch\":\"Epoch\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256,uint256,uint256)\":{\"params\":{\"dpxEpoch\":\"Epoch to withdraw from in DPX SSOV\",\"ethEpoch\":\"Epoch to store rewards for ETH SSOV\",\"strikeIndex\":\"Strike Index to withdraw from\"}}},\"stateVariables\":{\"dpx\":{\"details\":\"DPX token contract\"},\"dpxReceived\":{\"details\":\"epoch => amount\"},\"dpxSsov\":{\"details\":\"DPX SSOV contract\"},\"ethSsov\":{\"details\":\"ETH SSOV address\"},\"rdpx\":{\"details\":\"rDPX token contract\"},\"rdpxReceived\":{\"details\":\"epoch => amount\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(uint256,uint256)\":{\"notice\":\"Transfer rewards and deposit to DPX SSOV\"},\"pull(uint256,uint256,uint256,address)\":{\"notice\":\"Let ETH SSOV pull rewards DPX (and rDPX) rewards\"},\"stop()\":{\"notice\":\"Stop rewards\"},\"withdraw(uint256,uint256,uint256)\":{\"notice\":\"Withdraw rewards from DPX SSOV\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rewards/RewardsDistributionV2.sol\":\"RewardsDistributionV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29c462775f5b4c76dce400f120f3530aa3f81da42c839f975dc2b64784d22434\",\"license\":\"MIT\"},\"contracts/external/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * NOTE: Modified to include symbols and decimals.\\n */\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x8a99c98bc4e6ba9f3de4745a15ff7828c5ddb08ed2befd62f395e12a6ebf067c\",\"license\":\"UNLICENSED\"},\"contracts/external/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from '../interfaces/IERC20.sol';\\nimport {SafeMath} from '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            'SafeERC20: approve from non-zero to non-zero allowance'\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(\\n            value\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            'SafeERC20: decreased allowance below zero'\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            'SafeERC20: low-level call failed'\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                'SafeERC20: ERC20 operation did not succeed'\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x93f47d25474b00533fb8a2589aaabe366bf44107bc28486154ef9564776a9142\",\"license\":\"MIT\"},\"contracts/rewards/RewardsDistributionV2.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport {SafeERC20} from '../external/libraries/SafeERC20.sol';\\n\\n// Contracts\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\n\\n// Interfaces\\nimport {IERC20} from '../external/interfaces/IERC20.sol';\\n\\ninterface ISSOV {\\n    function deposit(\\n        uint256 strikeIndex,\\n        uint256 amount,\\n        address user\\n    ) external returns (bool);\\n\\n    function withdraw(uint256 epoch, uint256 strikeIndex)\\n        external\\n        returns (uint256[2] memory);\\n\\n    function currentEpoch() external view returns (uint256);\\n}\\n\\ncontract RewardsDistributionV2 is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev ETH SSOV address\\n    address public immutable ethSsov;\\n\\n    /// @dev DPX SSOV contract\\n    ISSOV public immutable dpxSsov;\\n\\n    /// @dev DPX token contract\\n    IERC20 public immutable dpx;\\n\\n    /// @dev rDPX token contract\\n    IERC20 public immutable rdpx;\\n\\n    /// @dev epoch => amount\\n    mapping(uint256 => uint256) public dpxReceived;\\n\\n    /// @dev epoch => amount\\n    mapping(uint256 => uint256) public rdpxReceived;\\n\\n    /// @param _ethSsov ETH SSOV address\\n    /// @param _dpxSsov DPX SSOV address\\n    /// @param _dpx DPX token address\\n    /// @param _rdpx rDPX token address\\n    constructor(\\n        address _ethSsov,\\n        address _dpxSsov,\\n        address _dpx,\\n        address _rdpx\\n    ) {\\n        ethSsov = _ethSsov;\\n        dpxSsov = ISSOV(_dpxSsov);\\n        dpx = IERC20(_dpx);\\n        rdpx = IERC20(_rdpx);\\n    }\\n\\n    /// @notice Transfer rewards and deposit to DPX SSOV\\n    /// @param strikeIndex Strike index in the DPX ssov to deposit in\\n    /// @param amount Amount of DPX rewards\\n    function deposit(uint256 strikeIndex, uint256 amount) external onlyOwner {\\n        dpx.safeTransferFrom(msg.sender, address(this), amount);\\n        dpx.safeApprove(address(dpxSsov), amount);\\n        dpxSsov.deposit(strikeIndex, amount, address(this));\\n    }\\n\\n    /// @notice Withdraw rewards from DPX SSOV\\n    /// @param dpxEpoch Epoch to withdraw from in DPX SSOV\\n    /// @param ethEpoch Epoch to store rewards for ETH SSOV\\n    /// @param strikeIndex Strike Index to withdraw from\\n    function withdraw(\\n        uint256 dpxEpoch,\\n        uint256 ethEpoch,\\n        uint256 strikeIndex\\n    ) external onlyOwner {\\n        uint256[2] memory returnValues = dpxSsov.withdraw(\\n            dpxEpoch,\\n            strikeIndex\\n        );\\n\\n        dpxReceived[ethEpoch] = returnValues[0];\\n        rdpxReceived[ethEpoch] = returnValues[1];\\n    }\\n\\n    /// @notice Stop rewards\\n    function stop() external onlyOwner {\\n        dpx.safeTransfer(msg.sender, dpx.balanceOf(address(this)));\\n        rdpx.safeTransfer(msg.sender, rdpx.balanceOf(address(this)));\\n\\n        uint256 epoch = ISSOV(ethSsov).currentEpoch();\\n\\n        dpxReceived[epoch] = 0;\\n        rdpxReceived[epoch] = 0;\\n    }\\n\\n    /// @notice Let ETH SSOV pull rewards DPX (and rDPX) rewards\\n    /// @param epoch Epoch\\n    function pull(\\n        uint256 epoch,\\n        uint256 userDeposit,\\n        uint256 totalDeposit,\\n        address user\\n    ) external returns (uint256 dpxRewards, uint256 rdpxRewards) {\\n        require(\\n            msg.sender == ethSsov,\\n            'RewardsDistribution: Caller must be ETH SSOV'\\n        );\\n        dpxRewards = (dpxReceived[epoch] * userDeposit) / totalDeposit;\\n        rdpxRewards = (rdpxReceived[epoch] * userDeposit) / totalDeposit;\\n        dpx.safeTransfer(user, dpxRewards);\\n        rdpx.safeTransfer(user, rdpxRewards);\\n    }\\n}\\n\",\"keccak256\":\"0xc01ce66e48fe67011909dd9b9b5829746d7d7f06f341598cf52efa06fd206999\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162001259380380620012598339810160408190526200003591620000d0565b620000403362000063565b6001600160a01b0393841660805291831660a052821660c0521660e0526200012d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000cb57600080fd5b919050565b60008060008060808587031215620000e757600080fd5b620000f285620000b3565b93506200010260208601620000b3565b92506200011260408601620000b3565b91506200012260608601620000b3565b905092959194509250565b60805160a05160c05160e051611097620001c2600039600081816101100152818161038301528181610407015261060201526000818161014f015281816102b501528181610339015281816105ce0152818161079801526107cd0152600081816101d0015281816106b2015281816107ef01526108370152600081816101f70152818161043201526104ee01526110976000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806390ba19601161008c578063d16e75f811610066578063d16e75f8146101f2578063e2bbb15814610219578063e2fd47cb1461022c578063f2fde38b1461024c57600080fd5b806390ba19601461018a578063a41fe49f146101b8578063bc8b750d146101cb57600080fd5b806307da68f5146100d45780630a62eadc146100de5780631f9902f51461010b57806343365f8c1461014a578063715018a6146101715780638da5cb5b14610179575b600080fd5b6100dc61025f565b005b6100f16100ec366004610dd8565b6104e0565b604080519283526020830191909152015b60405180910390f35b6101327f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610102565b6101327f000000000000000000000000000000000000000000000000000000000000000081565b6100dc610632565b6000546001600160a01b0316610132565b6101aa610198366004610e17565b60016020526000908152604090205481565b604051908152602001610102565b6100dc6101c6366004610e30565b610668565b6101327f000000000000000000000000000000000000000000000000000000000000000081565b6101327f000000000000000000000000000000000000000000000000000000000000000081565b6100dc610227366004610e5c565b610761565b6101aa61023a366004610e17565b60026020526000908152604090205481565b6100dc61025a366004610e7e565b6108c0565b6000546001600160a01b031633146102925760405162461bcd60e51b815260040161028990610e99565b60405180910390fd5b6040516370a0823160e01b81523060048201526103609033906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156102f757600080fd5b505afa15801561030b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032f9190610ece565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061095b565b6040516370a0823160e01b815230600482015261042e9033906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156103c557600080fd5b505afa1580156103d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fd9190610ece565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061095b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663766718086040518163ffffffff1660e01b815260040160206040518083038186803b15801561048957600080fd5b505afa15801561049d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c19190610ece565b6000908152600160209081526040808320839055600290915281205550565b600080336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105705760405162461bcd60e51b815260206004820152602c60248201527f52657761726473446973747269627574696f6e3a2043616c6c6572206d75737460448201526b1031329022aa241029a9a7ab60a11b6064820152608401610289565b600086815260016020526040902054849061058c908790610ee7565b6105969190610f14565b60008781526002602052604090205490925084906105b5908790610ee7565b6105bf9190610f14565b90506105f56001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016848461095b565b6106296001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016848361095b565b94509492505050565b6000546001600160a01b0316331461065c5760405162461bcd60e51b815260040161028990610e99565b61066660006109be565b565b6000546001600160a01b031633146106925760405162461bcd60e51b815260040161028990610e99565b604051630441a3e760e41b815260048101849052602481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063441a3e70906044016040805180830381600087803b1580156106fd57600080fd5b505af1158015610711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107359190610f36565b805160009485526001602090815260408087209290925591820151600290925290932092909255505050565b6000546001600160a01b0316331461078b5760405162461bcd60e51b815260040161028990610e99565b6107c06001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084610a0e565b6108146001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083610a4c565b604051638dbdbe6d60e01b815260048101839052602481018290523060448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638dbdbe6d90606401602060405180830381600087803b15801561088357600080fd5b505af1158015610897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bb9190610fc4565b505050565b6000546001600160a01b031633146108ea5760405162461bcd60e51b815260040161028990610e99565b6001600160a01b03811661094f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610289565b610958816109be565b50565b6040516001600160a01b0383166024820152604481018290526108bb90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610b70565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052610a469085906323b872dd60e01b90608401610987565b50505050565b801580610ad55750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015610a9b57600080fd5b505afa158015610aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad39190610ece565b155b610b405760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610289565b6040516001600160a01b0383166024820152604481018290526108bb90849063095ea7b360e01b90606401610987565b6000610bc5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610c429092919063ffffffff16565b8051909150156108bb5780806020019051810190610be39190610fc4565b6108bb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610289565b6060610c518484600085610c5b565b90505b9392505050565b606082471015610cbc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610289565b843b610d0a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610289565b600080866001600160a01b03168587604051610d269190611012565b60006040518083038185875af1925050503d8060008114610d63576040519150601f19603f3d011682016040523d82523d6000602084013e610d68565b606091505b5091509150610d78828286610d83565b979650505050505050565b60608315610d92575081610c54565b825115610da25782518084602001fd5b8160405162461bcd60e51b8152600401610289919061102e565b80356001600160a01b0381168114610dd357600080fd5b919050565b60008060008060808587031215610dee57600080fd5b843593506020850135925060408501359150610e0c60608601610dbc565b905092959194509250565b600060208284031215610e2957600080fd5b5035919050565b600080600060608486031215610e4557600080fd5b505081359360208301359350604090920135919050565b60008060408385031215610e6f57600080fd5b50508035926020909101359150565b600060208284031215610e9057600080fd5b610c5482610dbc565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215610ee057600080fd5b5051919050565b6000816000190483118215151615610f0f57634e487b7160e01b600052601160045260246000fd5b500290565b600082610f3157634e487b7160e01b600052601260045260246000fd5b500490565b600060408284031215610f4857600080fd5b82601f830112610f5757600080fd5b6040516040810181811067ffffffffffffffff82111715610f8857634e487b7160e01b600052604160045260246000fd5b8060405250806040840185811115610f9f57600080fd5b845b81811015610fb9578051835260209283019201610fa1565b509195945050505050565b600060208284031215610fd657600080fd5b81518015158114610c5457600080fd5b60005b83811015611001578181015183820152602001610fe9565b83811115610a465750506000910152565b60008251611024818460208701610fe6565b9190910192915050565b602081526000825180602084015261104d816040850160208701610fe6565b601f01601f1916919091016040019291505056fea26469706673582212205d11bfd09abf343266fe46637c202888cc3f3fe9b18f2ec9bf212561e071a54964736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806390ba19601161008c578063d16e75f811610066578063d16e75f8146101f2578063e2bbb15814610219578063e2fd47cb1461022c578063f2fde38b1461024c57600080fd5b806390ba19601461018a578063a41fe49f146101b8578063bc8b750d146101cb57600080fd5b806307da68f5146100d45780630a62eadc146100de5780631f9902f51461010b57806343365f8c1461014a578063715018a6146101715780638da5cb5b14610179575b600080fd5b6100dc61025f565b005b6100f16100ec366004610dd8565b6104e0565b604080519283526020830191909152015b60405180910390f35b6101327f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610102565b6101327f000000000000000000000000000000000000000000000000000000000000000081565b6100dc610632565b6000546001600160a01b0316610132565b6101aa610198366004610e17565b60016020526000908152604090205481565b604051908152602001610102565b6100dc6101c6366004610e30565b610668565b6101327f000000000000000000000000000000000000000000000000000000000000000081565b6101327f000000000000000000000000000000000000000000000000000000000000000081565b6100dc610227366004610e5c565b610761565b6101aa61023a366004610e17565b60026020526000908152604090205481565b6100dc61025a366004610e7e565b6108c0565b6000546001600160a01b031633146102925760405162461bcd60e51b815260040161028990610e99565b60405180910390fd5b6040516370a0823160e01b81523060048201526103609033906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156102f757600080fd5b505afa15801561030b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032f9190610ece565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061095b565b6040516370a0823160e01b815230600482015261042e9033906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156103c557600080fd5b505afa1580156103d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fd9190610ece565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061095b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663766718086040518163ffffffff1660e01b815260040160206040518083038186803b15801561048957600080fd5b505afa15801561049d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c19190610ece565b6000908152600160209081526040808320839055600290915281205550565b600080336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105705760405162461bcd60e51b815260206004820152602c60248201527f52657761726473446973747269627574696f6e3a2043616c6c6572206d75737460448201526b1031329022aa241029a9a7ab60a11b6064820152608401610289565b600086815260016020526040902054849061058c908790610ee7565b6105969190610f14565b60008781526002602052604090205490925084906105b5908790610ee7565b6105bf9190610f14565b90506105f56001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016848461095b565b6106296001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016848361095b565b94509492505050565b6000546001600160a01b0316331461065c5760405162461bcd60e51b815260040161028990610e99565b61066660006109be565b565b6000546001600160a01b031633146106925760405162461bcd60e51b815260040161028990610e99565b604051630441a3e760e41b815260048101849052602481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063441a3e70906044016040805180830381600087803b1580156106fd57600080fd5b505af1158015610711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107359190610f36565b805160009485526001602090815260408087209290925591820151600290925290932092909255505050565b6000546001600160a01b0316331461078b5760405162461bcd60e51b815260040161028990610e99565b6107c06001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084610a0e565b6108146001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083610a4c565b604051638dbdbe6d60e01b815260048101839052602481018290523060448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638dbdbe6d90606401602060405180830381600087803b15801561088357600080fd5b505af1158015610897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bb9190610fc4565b505050565b6000546001600160a01b031633146108ea5760405162461bcd60e51b815260040161028990610e99565b6001600160a01b03811661094f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610289565b610958816109be565b50565b6040516001600160a01b0383166024820152604481018290526108bb90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610b70565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052610a469085906323b872dd60e01b90608401610987565b50505050565b801580610ad55750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015610a9b57600080fd5b505afa158015610aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad39190610ece565b155b610b405760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610289565b6040516001600160a01b0383166024820152604481018290526108bb90849063095ea7b360e01b90606401610987565b6000610bc5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610c429092919063ffffffff16565b8051909150156108bb5780806020019051810190610be39190610fc4565b6108bb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610289565b6060610c518484600085610c5b565b90505b9392505050565b606082471015610cbc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610289565b843b610d0a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610289565b600080866001600160a01b03168587604051610d269190611012565b60006040518083038185875af1925050503d8060008114610d63576040519150601f19603f3d011682016040523d82523d6000602084013e610d68565b606091505b5091509150610d78828286610d83565b979650505050505050565b60608315610d92575081610c54565b825115610da25782518084602001fd5b8160405162461bcd60e51b8152600401610289919061102e565b80356001600160a01b0381168114610dd357600080fd5b919050565b60008060008060808587031215610dee57600080fd5b843593506020850135925060408501359150610e0c60608601610dbc565b905092959194509250565b600060208284031215610e2957600080fd5b5035919050565b600080600060608486031215610e4557600080fd5b505081359360208301359350604090920135919050565b60008060408385031215610e6f57600080fd5b50508035926020909101359150565b600060208284031215610e9057600080fd5b610c5482610dbc565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215610ee057600080fd5b5051919050565b6000816000190483118215151615610f0f57634e487b7160e01b600052601160045260246000fd5b500290565b600082610f3157634e487b7160e01b600052601260045260246000fd5b500490565b600060408284031215610f4857600080fd5b82601f830112610f5757600080fd5b6040516040810181811067ffffffffffffffff82111715610f8857634e487b7160e01b600052604160045260246000fd5b8060405250806040840185811115610f9f57600080fd5b845b81811015610fb9578051835260209283019201610fa1565b509195945050505050565b600060208284031215610fd657600080fd5b81518015158114610c5457600080fd5b60005b83811015611001578181015183820152602001610fe9565b83811115610a465750506000910152565b60008251611024818460208701610fe6565b9190910192915050565b602081526000825180602084015261104d816040850160208701610fe6565b601f01601f1916919091016040019291505056fea26469706673582212205d11bfd09abf343266fe46637c202888cc3f3fe9b18f2ec9bf212561e071a54964736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_dpx": "DPX token address",
          "_dpxSsov": "DPX SSOV address",
          "_ethSsov": "ETH SSOV address",
          "_rdpx": "rDPX token address"
        }
      },
      "deposit(uint256,uint256)": {
        "params": {
          "amount": "Amount of DPX rewards",
          "strikeIndex": "Strike index in the DPX ssov to deposit in"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pull(uint256,uint256,uint256,address)": {
        "params": {
          "epoch": "Epoch"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256,uint256,uint256)": {
        "params": {
          "dpxEpoch": "Epoch to withdraw from in DPX SSOV",
          "ethEpoch": "Epoch to store rewards for ETH SSOV",
          "strikeIndex": "Strike Index to withdraw from"
        }
      }
    },
    "stateVariables": {
      "dpx": {
        "details": "DPX token contract"
      },
      "dpxReceived": {
        "details": "epoch => amount"
      },
      "dpxSsov": {
        "details": "DPX SSOV contract"
      },
      "ethSsov": {
        "details": "ETH SSOV address"
      },
      "rdpx": {
        "details": "rDPX token contract"
      },
      "rdpxReceived": {
        "details": "epoch => amount"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(uint256,uint256)": {
        "notice": "Transfer rewards and deposit to DPX SSOV"
      },
      "pull(uint256,uint256,uint256,address)": {
        "notice": "Let ETH SSOV pull rewards DPX (and rDPX) rewards"
      },
      "stop()": {
        "notice": "Stop rewards"
      },
      "withdraw(uint256,uint256,uint256)": {
        "notice": "Withdraw rewards from DPX SSOV"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3344,
        "contract": "contracts/rewards/RewardsDistributionV2.sol:RewardsDistributionV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 48643,
        "contract": "contracts/rewards/RewardsDistributionV2.sol:RewardsDistributionV2",
        "label": "dpxReceived",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 48648,
        "contract": "contracts/rewards/RewardsDistributionV2.sol:RewardsDistributionV2",
        "label": "rdpxReceived",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}