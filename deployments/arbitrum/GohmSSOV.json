{
  "address": "0x89836d5F178141AAF013412b12aBD754802d2318",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gohm",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_optionPricing",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gohmPriceOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_volatilityOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeDistributor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "AddToContractWhitelist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "AddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "Bootstrap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gohmWithdrawn",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expireDelayTolerance",
          "type": "uint256"
        }
      ],
      "name": "ExpireDelayToleranceUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "settlementPrice",
          "type": "uint256"
        }
      ],
      "name": "ExpireEpoch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strike",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "NewDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strike",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "NewPurchase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strike",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pnl",
          "type": "uint256"
        }
      ],
      "name": "NewSettle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strike",
          "type": "uint256"
        }
      ],
      "name": "NewStrike",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strike",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gohmAmount",
          "type": "uint256"
        }
      ],
      "name": "NewWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "PurchaseFeePercentageUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "RemoveFromContractWhitelist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "addToContractWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "addresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bootstrap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strike",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strike",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculatePnl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_strike",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculatePremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strikeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "strikeIndices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "depositMultiple",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "epochStartTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "epochStrikeTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "epochStrikes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc20Implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expireDelayTolerance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expireEpoch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "settlementPrice",
          "type": "uint256"
        }
      ],
      "name": "expireEpoch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        }
      ],
      "name": "getAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "getEpochStrikeTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "getEpochStrikes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "getEpochTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getMonthlyExpiryFromTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "getTotalEpochCallsPurchased",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "getTotalEpochPremium",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "getTotalEpochStrikeDeposits",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsdPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserEpochCallsPurchased",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserEpochDeposits",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserEpochPremium",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isEpochExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isVaultReady",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strikeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "purchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchaseFeePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "removeFromContractWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "names",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "destinations",
          "type": "address[]"
        }
      ],
      "name": "setAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "strikes",
          "type": "uint256[]"
        }
      ],
      "name": "setStrikes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strikeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "settle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pnl",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "settlementPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalEpochCallsPurchased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalEpochDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalEpochPremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalEpochStrikeDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalEpochStrikeGohmBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expireDelayTolerance",
          "type": "uint256"
        }
      ],
      "name": "updateExpireDelayTolerance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "updatePurchaseFeePercentage",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "userEpochCallsPurchased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "userEpochDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "userEpochPremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedContracts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strikeIndex",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256[1]",
          "name": "",
          "type": "uint256[1]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ff2e533330b9e0ab1e9647301a2e7513e5c4960a8a33738e3b1883387730206",
  "receipt": {
    "to": null,
    "from": "0xDe485812E28824e542B9c2270B6b8eD9232B7D0b",
    "contractAddress": "0x89836d5F178141AAF013412b12aBD754802d2318",
    "transactionIndex": 0,
    "gasUsed": "168042021",
    "logsBloom": "0x
    "blockHash": "0xc5a3f3f590af535931a82c826df580414394720eb03e2855a1bb6448c65c12a1",
    "transactionHash": "0x4ff2e533330b9e0ab1e9647301a2e7513e5c4960a8a33738e3b1883387730206",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4004188,
        "transactionHash": "0x4ff2e533330b9e0ab1e9647301a2e7513e5c4960a8a33738e3b1883387730206",
        "address": "0x89836d5F178141AAF013412b12aBD754802d2318",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000de485812e28824e542b9c2270b6b8ed9232b7d0b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc5a3f3f590af535931a82c826df580414394720eb03e2855a1bb6448c65c12a1"
      }
    ],
    "blockNumber": 4004188,
    "cumulativeGasUsed": "118022541",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8D9bA570D6cb60C7e3e0F31343Efe75AB8E65FB1",
    "0x2b99e3D67dAD973c1B9747Da742B7E26c8Bdd67B",
    "0x5f5870C7364AE87643747B06a0Ca7fdE200147d4",
    "0xbf91446115f3E3eaF5079A88E078F876C0d7A6A8",
    "0x55594cCe8cC0014eA08C49fd820D731308f204c1"
  ],
  "solcInputHash": "3a35e2a94bcfd21a57f94b0e7d45da65",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gohm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_optionPricing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gohmPriceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_volatilityOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"AddToContractWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"AddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"Bootstrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gohmWithdrawn\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expireDelayTolerance\",\"type\":\"uint256\"}],\"name\":\"ExpireDelayToleranceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settlementPrice\",\"type\":\"uint256\"}],\"name\":\"ExpireEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NewPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pnl\",\"type\":\"uint256\"}],\"name\":\"NewSettle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"}],\"name\":\"NewStrike\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gohmAmount\",\"type\":\"uint256\"}],\"name\":\"NewWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseFeePercentage\",\"type\":\"uint256\"}],\"name\":\"PurchaseFeePercentageUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"RemoveFromContractWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"addToContractWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bootstrap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculatePnl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_strike\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculatePremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strikeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"strikeIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"depositMultiple\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochStartTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochStrikeTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochStrikes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expireDelayTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expireEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"settlementPrice\",\"type\":\"uint256\"}],\"name\":\"expireEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getEpochStrikeTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getEpochStrikes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getEpochTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getMonthlyExpiryFromTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getTotalEpochCallsPurchased\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getTotalEpochPremium\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getTotalEpochStrikeDeposits\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserEpochCallsPurchased\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserEpochDeposits\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserEpochPremium\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isEpochExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isVaultReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strikeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"removeFromContractWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"names\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"destinations\",\"type\":\"address[]\"}],\"name\":\"setAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"strikes\",\"type\":\"uint256[]\"}],\"name\":\"setStrikes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strikeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pnl\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"settlementPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalEpochCallsPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalEpochDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalEpochPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalEpochStrikeDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalEpochStrikeGohmBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expireDelayTolerance\",\"type\":\"uint256\"}],\"name\":\"updateExpireDelayTolerance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseFeePercentage\",\"type\":\"uint256\"}],\"name\":\"updatePurchaseFeePercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"userEpochCallsPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"userEpochDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"userEpochPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikeIndex\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256[1]\",\"name\":\"\",\"type\":\"uint256[1]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addToContractWhitelist(address)\":{\"details\":\"add to the contract whitelist\",\"params\":{\"_contract\":\"the address of the contract to add to the contract whitelist\"},\"returns\":{\"_0\":\"whether the contract was successfully added to the whitelist\"}},\"bootstrap()\":{\"returns\":{\"_0\":\"Whether bootstrap was successful\"}},\"calculateFees(uint256,uint256,uint256)\":{\"params\":{\"amount\":\"amount of options being bought\",\"price\":\"price of gOHM\",\"strike\":\"strike price of the the gOHM option\"}},\"calculatePnl(uint256,uint256,uint256)\":{\"params\":{\"amount\":\"amount of options\",\"price\":\"price of gOHM\",\"strike\":\"strike price of the the gOHM option\"}},\"calculatePremium(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of options\",\"_strike\":\"Strike price of the option\"}},\"deposit(uint256,uint256,address)\":{\"params\":{\"strikeIndex\":\"Index of strike\",\"user\":\"Address of the user to deposit for\"},\"returns\":{\"_0\":\"Whether deposit was successful\"}},\"depositMultiple(uint256[],uint256[],address)\":{\"params\":{\"amounts\":\"Amount of gOHM to deposit into each strike index\",\"strikeIndices\":\"Indices of strikes to deposit into\",\"user\":\"Address of the user to deposit for\"},\"returns\":{\"_0\":\"Whether deposits went through successfully\"}},\"emergencyWithdraw()\":{\"details\":\"Can only be called by governance\",\"returns\":{\"_0\":\"Whether emergency withdraw was successful\"}},\"expireEpoch()\":{\"returns\":{\"_0\":\"Whether expire was successful\"}},\"expireEpoch(uint256)\":{\"details\":\"Only callable by governace in case the delay tolerance was exceeded\",\"params\":{\"settlementPrice\":\"The settlement price\"},\"returns\":{\"_0\":\"Whether expire was successful\"}},\"getAddress(bytes32)\":{\"params\":{\"name\":\"Name of the contract\"},\"returns\":{\"_0\":\"The address of the contract\"}},\"getEpochStrikeTokens(uint256)\":{\"params\":{\"epoch\":\"Target epoch\"}},\"getEpochStrikes(uint256)\":{\"params\":{\"epoch\":\"Target epoch\"}},\"getEpochTimes(uint256)\":{\"params\":{\"epoch\":\"Target epoch\"}},\"getMonthlyExpiryFromTimestamp(uint256)\":{\"params\":{\"timestamp\":\"Timestamp from which the monthly expiry is to be calculated\"},\"returns\":{\"_0\":\"The monthly expiry\"}},\"getTotalEpochCallsPurchased(uint256)\":{\"params\":{\"epoch\":\"Target epoch\"}},\"getTotalEpochPremium(uint256)\":{\"params\":{\"epoch\":\"Target epoch\"}},\"getTotalEpochStrikeDeposits(uint256)\":{\"params\":{\"epoch\":\"Target epoch\"}},\"getUserEpochCallsPurchased(uint256,address)\":{\"params\":{\"epoch\":\"Target epoch\",\"user\":\"Address of the user\"}},\"getUserEpochDeposits(uint256,address)\":{\"params\":{\"epoch\":\"Target epoch\",\"user\":\"Address of the user\"}},\"getUserEpochPremium(uint256,address)\":{\"params\":{\"epoch\":\"Target epoch\",\"user\":\"Address of the user\"}},\"isContract(address)\":{\"details\":\"checks for contract or eoa addresses\",\"params\":{\"addr\":\"the address to check\"},\"returns\":{\"_0\":\"whether the passed address is a contract address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Can only be called by governance\",\"returns\":{\"_0\":\"Whether it was successfully paused\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"purchase(uint256,uint256,address)\":{\"params\":{\"amount\":\"Amount of calls to purchase\",\"strikeIndex\":\"Strike index for current epoch\",\"user\":\"User to purchase options for\"},\"returns\":{\"_0\":\"Whether purchase was successful\"}},\"removeFromContractWhitelist(address)\":{\"details\":\"remove from  the contract whitelist\",\"params\":{\"_contract\":\"the address of the contract to remove from the contract whitelist\"},\"returns\":{\"_0\":\"whether the contract was successfully removed from the whitelist\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAddresses(bytes32[],address[])\":{\"params\":{\"destinations\":\"Addresses of the contract\",\"names\":\"Names of the contracts\"},\"returns\":{\"_0\":\"Whether the addresses were set\"}},\"setStrikes(uint256[])\":{\"params\":{\"strikes\":\"Strikes to set for next epoch\"},\"returns\":{\"_0\":\"Whether strikes were set\"}},\"settle(uint256,uint256,uint256)\":{\"params\":{\"amount\":\"Amount of calls to exercise\",\"strikeIndex\":\"Strike index for current epoch\"},\"returns\":{\"pnl\":\"pnl\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Can only be called by governance\",\"returns\":{\"_0\":\"Whether it was successfully unpaused\"}},\"updateExpireDelayTolerance(uint256)\":{\"details\":\"Can only be called by governance\",\"returns\":{\"_0\":\"Whether it was successfully updated\"}},\"updatePurchaseFeePercentage(uint256)\":{\"details\":\"Can only be called by owner\",\"params\":{\"_purchaseFeePercentage\":\"The new fee\"},\"returns\":{\"_0\":\"Whether it was successfully updated\"}},\"withdraw(uint256,uint256)\":{\"params\":{\"strikeIndex\":\"Index of strike\",\"withdrawEpoch\":\"Epoch to withdraw from\"},\"returns\":{\"_0\":\"gOHM withdrawn\"}}},\"stateVariables\":{\"addresses\":{\"details\":\"The list of contract addresses the contract uses\"},\"currentEpoch\":{\"details\":\"Current epoch for ssov\"},\"epochStartTimes\":{\"details\":\"epoch => the epoch start time\"},\"epochStrikeTokens\":{\"details\":\"Mapping of (epoch => (strike => tokens))\"},\"epochStrikes\":{\"details\":\"Mapping of strikes for each epoch\"},\"erc20Implementation\":{\"details\":\"ERC20PresetMinterPauserUpgradeable implementation address\"},\"expireDelayTolerance\":{\"details\":\"Expire delay tolerance\"},\"isEpochExpired\":{\"details\":\"epoch => whether the epoch is expired\"},\"isVaultReady\":{\"details\":\"epoch => whether the vault is ready (boostrapped)\"},\"purchaseFeePercentage\":{\"details\":\"Purchase Fee: x% of the price of the underlying asset * the amount of options being bought * OTM Fee Multiplier\"},\"settlementPrices\":{\"details\":\"epoch => settlement price\"},\"totalEpochCallsPurchased\":{\"details\":\"mapping (epoch => (strike => calls purchased))\"},\"totalEpochDeposits\":{\"details\":\"mapping (epoch => deposits)\"},\"totalEpochPremium\":{\"details\":\"mapping (epoch => (strike => premium))\"},\"totalEpochStrikeDeposits\":{\"details\":\"mapping (epoch => (strike => deposits))\"},\"totalEpochStrikeGohmBalance\":{\"details\":\"mapping (epoch => (strike => balance))\"},\"userEpochCallsPurchased\":{\"details\":\"mapping (epoch => (abi.encodePacked(user, strike) => user calls purchased))\"},\"userEpochDeposits\":{\"details\":\"mapping (epoch => (abi.encodePacked(user, strike) => user deposits))\"},\"userEpochPremium\":{\"details\":\"mapping (epoch => (abi.encodePacked(user, strike) => user premium))\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bootstrap()\":{\"notice\":\"Bootstraps a new epoch and mints option tokens equivalent to user deposits for the epoch\"},\"calculateFees(uint256,uint256,uint256)\":{\"notice\":\"Calculate Fees\"},\"calculatePnl(uint256,uint256,uint256)\":{\"notice\":\"Calculate Pnl\"},\"calculatePremium(uint256,uint256)\":{\"notice\":\"Calculate premium for an option\"},\"deposit(uint256,uint256,address)\":{\"notice\":\"Deposits gOHM into the ssov to mint options in the next epoch for selected strikes\"},\"depositMultiple(uint256[],uint256[],address)\":{\"notice\":\"Deposit gOHM multiple times into different strike\"},\"emergencyWithdraw()\":{\"notice\":\"Transfers all funds to msg.sender\"},\"expireEpoch()\":{\"notice\":\"Sets the current epoch as expired.\"},\"expireEpoch(uint256)\":{\"notice\":\"Sets the current epoch as expired.\"},\"getAddress(bytes32)\":{\"notice\":\"Gets the address of a set contract\"},\"getEpochStrikeTokens(uint256)\":{\"notice\":\"Returns epoch strike tokens array for an epoch\"},\"getEpochStrikes(uint256)\":{\"notice\":\"Returns epoch strikes array for an epoch\"},\"getEpochTimes(uint256)\":{\"notice\":\"Returns start and end times for an epoch\"},\"getMonthlyExpiryFromTimestamp(uint256)\":{\"notice\":\"Calculates the monthly expiry from a solidity date\"},\"getTotalEpochCallsPurchased(uint256)\":{\"notice\":\"Returns total epoch calls purchased array for an epoch\"},\"getTotalEpochPremium(uint256)\":{\"notice\":\"Returns total epoch premium array for an epoch\"},\"getTotalEpochStrikeDeposits(uint256)\":{\"notice\":\"Returns total epoch strike deposits array for an epoch\"},\"getUsdPrice()\":{\"notice\":\"Returns gOHM price in USD in 1e8\"},\"getUserEpochCallsPurchased(uint256,address)\":{\"notice\":\"Returns user epoch calls purchased array for an epoch\"},\"getUserEpochDeposits(uint256,address)\":{\"notice\":\"Returns user epoch deposits array for an epoch\"},\"getUserEpochPremium(uint256,address)\":{\"notice\":\"Returns user epoch premium array for an epoch\"},\"isEpochExpired(uint256)\":{\"notice\":\"Is epoch expired\"},\"isVaultReady(uint256)\":{\"notice\":\"Is vault ready for next epoch\"},\"pause()\":{\"notice\":\"Pauses the vault for emergency cases\"},\"purchase(uint256,uint256,address)\":{\"notice\":\"Purchases calls for the current epoch\"},\"setAddresses(bytes32[],address[])\":{\"notice\":\"Sets (adds) a list of addresses to the address list\"},\"setStrikes(uint256[])\":{\"notice\":\"Sets strikes for next epoch\"},\"settle(uint256,uint256,uint256)\":{\"notice\":\"Settle calculates the PnL for the user with the settlement price and withdraws the PnL in gOHM to the user. Will also the burn the option tokens from the user.\"},\"totalEpochDeposits(uint256)\":{\"notice\":\"Total epoch deposits across all strikes\"},\"totalEpochPremium(uint256,uint256)\":{\"notice\":\"Premium collected per strike for an epoch\"},\"totalEpochStrikeDeposits(uint256,uint256)\":{\"notice\":\"Total epoch deposits for specific strikes\"},\"totalEpochStrikeGohmBalance(uint256,uint256)\":{\"notice\":\"Epoch gOHM balance per strike after accounting for rewards\"},\"unpause()\":{\"notice\":\"Unpauses the vault\"},\"updateExpireDelayTolerance(uint256)\":{\"notice\":\"Updates the delay tolerance for the expiry epoch function\"},\"updatePurchaseFeePercentage(uint256)\":{\"notice\":\"Update the purchase fee percentage\"},\"userEpochCallsPurchased(uint256,bytes32)\":{\"notice\":\"Calls purchased by user for each strike\"},\"userEpochDeposits(uint256,bytes32)\":{\"notice\":\"Epoch deposits by user for each strike\"},\"userEpochPremium(uint256,bytes32)\":{\"notice\":\"User premium collected per strike for an epoch\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraws balances for a strike in a completed epoch\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SSOV/GohmSSOV.sol\":\"GohmSSOV\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf86310d29c89437e647e1caa78ab23ecb798a9d5c17b8df30becba2e6fa95307\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xdfe5444167c3b8cb94bb80044f56148151466d62a86b950c4b57c1ab8bdced7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbf52f286f06b5468b1bedc6ec9f85cc9da01f64542df10cc9ecc660d0e78d4d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb1503d6ad7d4251970bfc4fa2d7e6fa2c7716010a0b3d642bdc078cdbef5ecc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x45ed45e599d282187d4eb122e5b99e403f3d87853ba6c28a844702141d3fa587\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x47852df4456c4b7e2fbda473b1c237f24991d2ceb1c7cba8d90e229bf6add473\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xb34b8dc5fbc20d8d7e5ed2fd1a0ed87e1fb024d3ae0c61fd4368565ce733aa7e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC20Burnable_init_unchained();\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xc659324888f15893e60410d8b43ee4a9ed24cd5cdc074442837683ddbfdbcfa5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../security/PausableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20PausableUpgradeable is Initializable, ERC20Upgradeable, PausableUpgradeable {\\n    function __ERC20Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n        __ERC20Pausable_init_unchained();\\n    }\\n\\n    function __ERC20Pausable_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6c84df4288bb39bed5d00f9b632bc9f5b6d2a341fec23213754c5eca2eb4c3d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x0c85e40b29481eadb132cb5eb973d27b4567098f4bc257b250ee540d8d309a00\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/presets/ERC20PresetMinterPauser.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/ERC20BurnableUpgradeable.sol\\\";\\nimport \\\"../extensions/ERC20PausableUpgradeable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract ERC20PresetMinterPauserUpgradeable is Initializable, ContextUpgradeable, AccessControlEnumerableUpgradeable, ERC20BurnableUpgradeable, ERC20PausableUpgradeable {\\n    function initialize(string memory name, string memory symbol) public virtual initializer {\\n        __ERC20PresetMinterPauser_init(name, symbol);\\n    }\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    function __ERC20PresetMinterPauser_init(string memory name, string memory symbol) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n        __ERC20_init_unchained(name, symbol);\\n        __ERC20Burnable_init_unchained();\\n        __Pausable_init_unchained();\\n        __ERC20Pausable_init_unchained();\\n        __ERC20PresetMinterPauser_init_unchained(name, symbol);\\n    }\\n\\n    function __ERC20PresetMinterPauser_init_unchained(string memory name, string memory symbol) internal initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have minter role to mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20Upgradeable, ERC20PausableUpgradeable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xedea7503308e882dffad3a1a8b01696138c084b758e61d73fcc9c52381c730f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xed12e1c10c09054954b16a1b1f4250c4bbc0c7140d720777626fb5886a1a0e25\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8c5737e80521ac5e76c0d9d2cdb67647906fdadeb296644910eeecb31042e1da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x650712f855228b7cdeb90738d99dd33ff3a7c9770914ff03eb93f90218fe164b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0ae1b487d859795570a74b56dcfbb2ecaadebb904970172490223c8808c56aae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xb0ff3f5c37c94cfa0da555a4c7d9034c46d70d0479917bed63612a9fc7092672\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x6881efb8fa7b41a7a7c2e6e5b31f0f19d0735a6485f2912f8db5802546aeaf16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x86ebc6cea2b539c2d4a79a4754f7c90c43c45c9aaf0aab32ecffb1565afc5e0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5fa25f305839292fab713256214f2868e0257d29826b14282bbd7f1e34f5af38\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29c462775f5b4c76dce400f120f3530aa3f81da42c839f975dc2b64784d22434\",\"license\":\"MIT\"},\"contracts/SSOV/GohmSSOV.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/*\\n                        gOHM SINGLE STAKING OPTION VAULT\\n            Mints covered calls while farming yield on single sided gOHM staking farm                                                           \\n*/\\n\\n// Libraries\\nimport {Strings} from '@openzeppelin/contracts/utils/Strings.sol';\\nimport {Clones} from '@openzeppelin/contracts/proxy/Clones.sol';\\nimport {BokkyPooBahsDateTimeLibrary} from '../external/libraries/BokkyPooBahsDateTimeLibrary.sol';\\nimport {SafeERC20} from '../external/libraries/SafeERC20.sol';\\n\\n// Contracts\\nimport {ReentrancyGuard} from '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport {ERC20PresetMinterPauserUpgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/presets/ERC20PresetMinterPauserUpgradeable.sol';\\nimport {Pausable} from '@openzeppelin/contracts/security/Pausable.sol';\\nimport {ContractWhitelist} from '../helper/ContractWhitelist.sol';\\n\\n// Interfaces\\nimport {IChainlinkV3Aggregator} from '../external/interfaces/IChainlinkV3Aggregator.sol';\\nimport {IVolatilityOracle} from '../interfaces/IVolatilityOracle.sol';\\nimport {IOptionPricing} from '../interfaces/IOptionPricing.sol';\\nimport {IERC20SSOV} from '../interfaces/IERC20SSOV.sol';\\nimport {IERC20} from '../external/interfaces/IERC20.sol';\\n\\ninterface IPriceOracle {\\n    function getPriceInUSD() external view returns (uint256);\\n}\\n\\ncontract GohmSSOV is Pausable, ReentrancyGuard, IERC20SSOV, ContractWhitelist {\\n    using BokkyPooBahsDateTimeLibrary for uint256;\\n    using Strings for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev ERC20PresetMinterPauserUpgradeable implementation address\\n    address public immutable erc20Implementation;\\n\\n    /// @dev Current epoch for ssov\\n    uint256 public override currentEpoch;\\n\\n    /// @dev Purchase Fee: x% of the price of the underlying asset * the amount of options being bought * OTM Fee Multiplier\\n    uint256 public purchaseFeePercentage = 125e8 / 1000; // 0.125%\\n\\n    /// @dev Expire delay tolerance\\n    uint256 public expireDelayTolerance = 5 minutes;\\n\\n    /// @dev The list of contract addresses the contract uses\\n    mapping(bytes32 => address) public addresses;\\n\\n    /// @dev epoch => the epoch start time\\n    mapping(uint256 => uint256) public epochStartTimes;\\n\\n    /// @notice Is epoch expired\\n    /// @dev epoch => whether the epoch is expired\\n    mapping(uint256 => bool) public isEpochExpired;\\n\\n    /// @notice Is vault ready for next epoch\\n    /// @dev epoch => whether the vault is ready (boostrapped)\\n    mapping(uint256 => bool) public isVaultReady;\\n\\n    /// @dev Mapping of strikes for each epoch\\n    mapping(uint256 => uint256[]) public override epochStrikes;\\n\\n    /// @dev Mapping of (epoch => (strike => tokens))\\n    mapping(uint256 => mapping(uint256 => address))\\n        public\\n        override epochStrikeTokens;\\n\\n    /// @notice Total epoch deposits for specific strikes\\n    /// @dev mapping (epoch => (strike => deposits))\\n    mapping(uint256 => mapping(uint256 => uint256))\\n        public totalEpochStrikeDeposits;\\n\\n    /// @notice Total epoch deposits across all strikes\\n    /// @dev mapping (epoch => deposits)\\n    mapping(uint256 => uint256) public totalEpochDeposits;\\n\\n    /// @notice Epoch deposits by user for each strike\\n    /// @dev mapping (epoch => (abi.encodePacked(user, strike) => user deposits))\\n    mapping(uint256 => mapping(bytes32 => uint256)) public userEpochDeposits;\\n\\n    /// @notice Epoch gOHM balance per strike after accounting for rewards\\n    /// @dev mapping (epoch => (strike => balance))\\n    mapping(uint256 => mapping(uint256 => uint256))\\n        public totalEpochStrikeGohmBalance;\\n\\n    // Calls purchased for each strike in an epoch\\n    /// @dev mapping (epoch => (strike => calls purchased))\\n    mapping(uint256 => mapping(uint256 => uint256))\\n        public totalEpochCallsPurchased;\\n\\n    /// @notice Calls purchased by user for each strike\\n    /// @dev mapping (epoch => (abi.encodePacked(user, strike) => user calls purchased))\\n    mapping(uint256 => mapping(bytes32 => uint256))\\n        public userEpochCallsPurchased;\\n\\n    /// @notice Premium collected per strike for an epoch\\n    /// @dev mapping (epoch => (strike => premium))\\n    mapping(uint256 => mapping(uint256 => uint256)) public totalEpochPremium;\\n\\n    /// @notice User premium collected per strike for an epoch\\n    /// @dev mapping (epoch => (abi.encodePacked(user, strike) => user premium))\\n    mapping(uint256 => mapping(bytes32 => uint256)) public userEpochPremium;\\n\\n    /// @dev epoch => settlement price\\n    mapping(uint256 => uint256) public settlementPrices;\\n\\n    /*==== EVENTS ====*/\\n\\n    event ExpireDelayToleranceUpdate(uint256 expireDelayTolerance);\\n\\n    event PurchaseFeePercentageUpdate(uint256 purchaseFeePercentage);\\n\\n    event AddressSet(bytes32 indexed name, address indexed destination);\\n\\n    event EmergencyWithdraw(address sender, uint256 gohmWithdrawn);\\n\\n    event ExpireEpoch(uint256 epoch, uint256 settlementPrice);\\n\\n    event NewStrike(uint256 epoch, uint256 strike);\\n\\n    event Bootstrap(uint256 epoch);\\n\\n    event NewDeposit(\\n        uint256 epoch,\\n        uint256 strike,\\n        uint256 amount,\\n        address user,\\n        address sender\\n    );\\n\\n    event NewPurchase(\\n        uint256 epoch,\\n        uint256 strike,\\n        uint256 amount,\\n        uint256 premium,\\n        uint256 fee,\\n        address user,\\n        address sender\\n    );\\n\\n    event NewSettle(\\n        uint256 epoch,\\n        uint256 strike,\\n        address user,\\n        uint256 amount,\\n        uint256 pnl\\n    );\\n\\n    event NewWithdraw(\\n        uint256 epoch,\\n        uint256 strike,\\n        address user,\\n        uint256 amount,\\n        uint256 gohmAmount\\n    );\\n\\n    /*==== CONSTRUCTOR ====*/\\n\\n    constructor(\\n        address _gohm,\\n        address _optionPricing,\\n        address _gohmPriceOracle,\\n        address _volatilityOracle,\\n        address _feeDistributor\\n    ) {\\n        require(_gohm != address(0), 'E1');\\n        require(_optionPricing != address(0), 'E1');\\n        require(_gohmPriceOracle != address(0), 'E1');\\n        require(_volatilityOracle != address(0), 'E1');\\n        require(_feeDistributor != address(0), 'E1');\\n\\n        addresses['gOHM'] = _gohm;\\n        addresses['OptionPricing'] = _optionPricing;\\n        addresses['GohmPriceOracle'] = _gohmPriceOracle;\\n        addresses['VolatilityOracle'] = _volatilityOracle;\\n        addresses['FeeDistributor'] = _feeDistributor;\\n        addresses['Governance'] = msg.sender;\\n\\n        erc20Implementation = address(new ERC20PresetMinterPauserUpgradeable());\\n    }\\n\\n    /*==== SETTER METHODS ====*/\\n\\n    /// @notice Pauses the vault for emergency cases\\n    /// @dev Can only be called by governance\\n    /// @return Whether it was successfully paused\\n    function pause() external onlyGovernance returns (bool) {\\n        _pause();\\n        _updateFinalEpochBalances(false);\\n        return true;\\n    }\\n\\n    /// @notice Unpauses the vault\\n    /// @dev Can only be called by governance\\n    /// @return Whether it was successfully unpaused\\n    function unpause() external onlyGovernance returns (bool) {\\n        _unpause();\\n        return true;\\n    }\\n\\n    /// @notice Updates the delay tolerance for the expiry epoch function\\n    /// @dev Can only be called by governance\\n    /// @return Whether it was successfully updated\\n    function updateExpireDelayTolerance(uint256 _expireDelayTolerance)\\n        external\\n        onlyGovernance\\n        returns (bool)\\n    {\\n        expireDelayTolerance = _expireDelayTolerance;\\n        emit ExpireDelayToleranceUpdate(_expireDelayTolerance);\\n        return true;\\n    }\\n\\n    /// @notice Update the purchase fee percentage\\n    /// @dev Can only be called by owner\\n    /// @param _purchaseFeePercentage The new fee\\n    /// @return Whether it was successfully updated\\n    function updatePurchaseFeePercentage(uint256 _purchaseFeePercentage)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        purchaseFeePercentage = _purchaseFeePercentage;\\n        emit PurchaseFeePercentageUpdate(_purchaseFeePercentage);\\n        return true;\\n    }\\n\\n    /// @notice Sets (adds) a list of addresses to the address list\\n    /// @param names Names of the contracts\\n    /// @param destinations Addresses of the contract\\n    /// @return Whether the addresses were set\\n    function setAddresses(\\n        bytes32[] calldata names,\\n        address[] calldata destinations\\n    ) external onlyOwner returns (bool) {\\n        require(names.length == destinations.length, 'E2');\\n        for (uint256 i = 0; i < names.length; i++) {\\n            bytes32 name = names[i];\\n            address destination = destinations[i];\\n            addresses[name] = destination;\\n            emit AddressSet(name, destination);\\n        }\\n        return true;\\n    }\\n\\n    /*==== METHODS ====*/\\n\\n    /// @notice Transfers all funds to msg.sender\\n    /// @dev Can only be called by governance\\n    /// @return Whether emergency withdraw was successful\\n    function emergencyWithdraw()\\n        external\\n        onlyGovernance\\n        whenPaused\\n        returns (bool)\\n    {\\n        IERC20 gohm = IERC20(getAddress('gOHM'));\\n\\n        uint256 gohmBalance = gohm.balanceOf(address(this));\\n\\n        gohm.safeTransfer(msg.sender, gohmBalance);\\n\\n        emit EmergencyWithdraw(msg.sender, gohmBalance);\\n\\n        return true;\\n    }\\n\\n    /// @notice Sets the current epoch as expired.\\n    /// @return Whether expire was successful\\n    function expireEpoch() external whenNotPaused nonReentrant returns (bool) {\\n        require(!isEpochExpired[currentEpoch], 'E3');\\n        (, uint256 epochExpiry) = getEpochTimes(currentEpoch);\\n        require((block.timestamp >= epochExpiry), 'E4');\\n        require(block.timestamp <= epochExpiry + expireDelayTolerance, 'E23');\\n\\n        settlementPrices[currentEpoch] = getUsdPrice();\\n\\n        _updateFinalEpochBalances(true);\\n\\n        isEpochExpired[currentEpoch] = true;\\n\\n        emit ExpireEpoch(currentEpoch, settlementPrices[currentEpoch]);\\n\\n        return true;\\n    }\\n\\n    /// @notice Sets the current epoch as expired.\\n    /// @dev Only callable by governace in case the delay tolerance was exceeded\\n    /// @param settlementPrice The settlement price\\n    /// @return Whether expire was successful\\n    function expireEpoch(uint256 settlementPrice)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n        onlyGovernance\\n        returns (bool)\\n    {\\n        require(!isEpochExpired[currentEpoch], 'E3');\\n        (, uint256 epochExpiry) = getEpochTimes(currentEpoch);\\n        require((block.timestamp > epochExpiry + expireDelayTolerance), 'E4');\\n\\n        settlementPrices[currentEpoch] = settlementPrice;\\n\\n        _updateFinalEpochBalances(true);\\n\\n        isEpochExpired[currentEpoch] = true;\\n\\n        emit ExpireEpoch(currentEpoch, settlementPrices[currentEpoch]);\\n\\n        return true;\\n    }\\n\\n    /// @dev Updates the final epoch gOHM balances per strike of the vault\\n    /// @param accountPremiums Should account premiums into calculations\\n    function _updateFinalEpochBalances(bool accountPremiums) internal {\\n        uint256[] memory strikes = epochStrikes[currentEpoch];\\n\\n        for (uint256 i = 0; i < strikes.length; i++) {\\n            uint256 settlement = calculatePnl(\\n                settlementPrices[currentEpoch],\\n                strikes[i],\\n                totalEpochCallsPurchased[currentEpoch][strikes[i]]\\n            );\\n\\n            // Update final eth balances for epoch and strike\\n            totalEpochStrikeGohmBalance[currentEpoch][strikes[i]] =\\n                totalEpochStrikeDeposits[currentEpoch][strikes[i]] -\\n                settlement;\\n\\n            if (accountPremiums) {\\n                totalEpochStrikeGohmBalance[currentEpoch][\\n                    strikes[i]\\n                ] += totalEpochPremium[currentEpoch][strikes[i]];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Bootstraps a new epoch and mints option tokens equivalent to user deposits for the epoch\\n     * @return Whether bootstrap was successful\\n     */\\n    function bootstrap() external onlyOwner whenNotPaused returns (bool) {\\n        uint256 nextEpoch = currentEpoch + 1;\\n        require(!isVaultReady[nextEpoch], 'E5');\\n        require(epochStrikes[nextEpoch].length > 0, 'E6');\\n\\n        if (currentEpoch > 0) {\\n            // Previous epoch must be expired\\n            require(isEpochExpired[currentEpoch], 'E7');\\n        }\\n\\n        for (uint256 i = 0; i < epochStrikes[nextEpoch].length; i++) {\\n            uint256 strike = epochStrikes[nextEpoch][i];\\n            string memory name = concatenate('gOHM-CALL', strike.toString());\\n            name = concatenate(name, '-EPOCH-');\\n            name = concatenate(name, (nextEpoch).toString());\\n            // Create doTokens representing calls for selected strike in epoch\\n            ERC20PresetMinterPauserUpgradeable _erc20 = ERC20PresetMinterPauserUpgradeable(\\n                    Clones.clone(erc20Implementation)\\n                );\\n            _erc20.initialize(name, name);\\n            epochStrikeTokens[nextEpoch][strike] = address(_erc20);\\n            // Mint tokens equivalent to deposits for strike in epoch\\n            _erc20.mint(\\n                address(this),\\n                totalEpochStrikeDeposits[nextEpoch][strike]\\n            );\\n        }\\n\\n        // Mark vault as ready for epoch\\n        isVaultReady[nextEpoch] = true;\\n        // Increase the current epoch\\n        currentEpoch = nextEpoch;\\n\\n        emit Bootstrap(nextEpoch);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Sets strikes for next epoch\\n     * @param strikes Strikes to set for next epoch\\n     * @return Whether strikes were set\\n     */\\n    function setStrikes(uint256[] memory strikes)\\n        external\\n        onlyOwner\\n        whenNotPaused\\n        returns (bool)\\n    {\\n        uint256 nextEpoch = currentEpoch + 1;\\n\\n        require(totalEpochDeposits[nextEpoch] == 0, 'E8');\\n\\n        if (currentEpoch > 0) {\\n            (, uint256 epochExpiry) = getEpochTimes(currentEpoch);\\n            require((block.timestamp > epochExpiry), 'E9');\\n        }\\n\\n        // Set the next epoch strikes\\n        epochStrikes[nextEpoch] = strikes;\\n        // Set the next epoch start time\\n        epochStartTimes[nextEpoch] = block.timestamp;\\n\\n        for (uint256 i = 0; i < strikes.length; i++)\\n            emit NewStrike(nextEpoch, strikes[i]);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Deposits gOHM into the ssov to mint options in the next epoch for selected strikes\\n     * @param strikeIndex Index of strike\\n     * @param user Address of the user to deposit for\\n     * @return Whether deposit was successful\\n     */\\n    function deposit(\\n        uint256 strikeIndex,\\n        uint256 amount,\\n        address user\\n    ) external nonReentrant returns (bool) {\\n        _deposit(strikeIndex, amount, user);\\n\\n        IERC20(getAddress('gOHM')).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Deposit gOHM multiple times into different strike\\n     * @param strikeIndices Indices of strikes to deposit into\\n     * @param amounts Amount of gOHM to deposit into each strike index\\n     * @param user Address of the user to deposit for\\n     * @return Whether deposits went through successfully\\n     */\\n    function depositMultiple(\\n        uint256[] memory strikeIndices,\\n        uint256[] memory amounts,\\n        address user\\n    ) external nonReentrant returns (bool) {\\n        require(strikeIndices.length == amounts.length, 'E2');\\n\\n        uint256 totalAmount;\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            totalAmount += amounts[i];\\n        }\\n\\n        for (uint256 i = 0; i < strikeIndices.length; i++) {\\n            _deposit(strikeIndices[i], amounts[i], user);\\n        }\\n\\n        IERC20(getAddress('gOHM')).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            totalAmount\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Internal function to handle gOHM deposits\\n     * @param strikeIndex Index of strike\\n     * @param amount Amout of gOHM to deposit\\n     */\\n    function _deposit(\\n        uint256 strikeIndex,\\n        uint256 amount,\\n        address user\\n    ) internal whenNotPaused isEligibleSender {\\n        uint256 nextEpoch = currentEpoch + 1;\\n\\n        if (currentEpoch > 0) {\\n            require(\\n                isEpochExpired[currentEpoch] && !isVaultReady[nextEpoch],\\n                'E19'\\n            );\\n        }\\n        // Must be a valid strikeIndex\\n        require(strikeIndex < epochStrikes[nextEpoch].length, 'E10');\\n\\n        // Must +ve amount\\n        require(amount > 0, 'E11');\\n\\n        // Must be a valid strike\\n        uint256 strike = epochStrikes[nextEpoch][strikeIndex];\\n        require(strike != 0, 'E12');\\n\\n        bytes32 userStrike = keccak256(abi.encodePacked(user, strike));\\n        // Add to user epoch deposits\\n        userEpochDeposits[nextEpoch][userStrike] += amount;\\n        // Add to total epoch strike deposits\\n        totalEpochStrikeDeposits[nextEpoch][strike] += amount;\\n        // Add to total epoch deposits\\n        totalEpochDeposits[nextEpoch] += amount;\\n\\n        emit NewDeposit(nextEpoch, strike, amount, user, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Purchases calls for the current epoch\\n     * @param strikeIndex Strike index for current epoch\\n     * @param amount Amount of calls to purchase\\n     * @param user User to purchase options for\\n     * @return Whether purchase was successful\\n     */\\n    function purchase(\\n        uint256 strikeIndex,\\n        uint256 amount,\\n        address user\\n    )\\n        external\\n        whenNotPaused\\n        nonReentrant\\n        isEligibleSender\\n        returns (uint256, uint256)\\n    {\\n        (, uint256 epochExpiry) = getEpochTimes(currentEpoch);\\n        require((block.timestamp < epochExpiry), 'E24');\\n        require(isVaultReady[currentEpoch], 'E20');\\n        require(strikeIndex < epochStrikes[currentEpoch].length, 'E10');\\n        require(amount > 0, 'E11');\\n        uint256 strike = epochStrikes[currentEpoch][strikeIndex];\\n        require(strike != 0, 'E12');\\n        bytes32 userStrike = keccak256(abi.encodePacked(user, strike));\\n\\n        uint256 currentPrice = getUsdPrice();\\n        // Get total premium for all calls being purchased\\n        uint256 premium = calculatePremium(strike, amount);\\n\\n        // total fees charged\\n        uint256 totalFee = calculateFees(currentPrice, strike, amount);\\n\\n        uint256 finalTotal = premium + totalFee;\\n\\n        // Add to total epoch calls purchased\\n        totalEpochCallsPurchased[currentEpoch][strike] += amount;\\n        // Add to user epoch calls purchased\\n        userEpochCallsPurchased[currentEpoch][userStrike] += amount;\\n        // Add to total epoch premium + fees\\n        totalEpochPremium[currentEpoch][strike] += premium;\\n        // Add to user epoch premium + fees\\n        userEpochPremium[currentEpoch][userStrike] += premium;\\n\\n        // Transfer premium + fees from user\\n        IERC20(getAddress('gOHM')).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            finalTotal\\n        );\\n\\n        // Transfer fee to FeeDistributor\\n        IERC20(getAddress('gOHM')).safeTransfer(\\n            getAddress('FeeDistributor'),\\n            totalFee\\n        );\\n\\n        // Transfer doTokens to user\\n        IERC20(epochStrikeTokens[currentEpoch][strike]).safeTransfer(\\n            user,\\n            amount\\n        );\\n\\n        emit NewPurchase(\\n            currentEpoch,\\n            strike,\\n            amount,\\n            premium,\\n            totalFee,\\n            user,\\n            msg.sender\\n        );\\n\\n        return (premium, totalFee);\\n    }\\n\\n    /**\\n     * @notice Settle calculates the PnL for the user with the settlement price and withdraws the PnL in gOHM to the user. Will also the burn the option tokens from the user.\\n     * @param strikeIndex Strike index for current epoch\\n     * @param amount Amount of calls to exercise\\n     * @return pnl\\n     */\\n    function settle(\\n        uint256 strikeIndex,\\n        uint256 amount,\\n        uint256 epoch\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        nonReentrant\\n        isEligibleSender\\n        returns (uint256 pnl)\\n    {\\n        require(isEpochExpired[epoch], 'E17');\\n        require(strikeIndex < epochStrikes[epoch].length, 'E10');\\n        require(amount > 0, 'E11');\\n\\n        uint256 strike = epochStrikes[epoch][strikeIndex];\\n        require(strike != 0, 'E12');\\n\\n        require(\\n            IERC20(epochStrikeTokens[epoch][strike]).balanceOf(msg.sender) >=\\n                amount,\\n            'E16'\\n        );\\n\\n        // Calculate PnL (in gOHM)\\n        pnl = calculatePnl(settlementPrices[epoch], strike, amount);\\n\\n        require(pnl > 0, 'E15');\\n\\n        // Burn user option tokens\\n        ERC20PresetMinterPauserUpgradeable(epochStrikeTokens[epoch][strike])\\n            .burnFrom(msg.sender, amount);\\n\\n        // Transfer PnL to user\\n        IERC20(getAddress('gOHM')).safeTransfer(msg.sender, pnl);\\n\\n        emit NewSettle(epoch, strike, msg.sender, amount, pnl);\\n    }\\n\\n    /**\\n     * @notice Withdraws balances for a strike in a completed epoch\\n     * @param withdrawEpoch Epoch to withdraw from\\n     * @param strikeIndex Index of strike\\n     * @return gOHM withdrawn\\n     */\\n    function withdraw(uint256 withdrawEpoch, uint256 strikeIndex)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n        isEligibleSender\\n        returns (uint256[1] memory)\\n    {\\n        require(isEpochExpired[withdrawEpoch], 'E17');\\n        require(strikeIndex < epochStrikes[withdrawEpoch].length, 'E10');\\n\\n        uint256 strike = epochStrikes[withdrawEpoch][strikeIndex];\\n        require(strike != 0, 'E12');\\n\\n        bytes32 userStrike = keccak256(abi.encodePacked(msg.sender, strike));\\n        uint256 userStrikeDeposits = userEpochDeposits[withdrawEpoch][\\n            userStrike\\n        ];\\n        require(userStrikeDeposits > 0, 'E18');\\n\\n        // Calculate amount of gOHM to transfer to user\\n        uint256 userGohmAmount = (totalEpochStrikeGohmBalance[withdrawEpoch][\\n            strike\\n        ] * userStrikeDeposits) /\\n            totalEpochStrikeDeposits[withdrawEpoch][strike];\\n\\n        userEpochDeposits[withdrawEpoch][userStrike] = 0;\\n\\n        // Transfer gOHM to user\\n        IERC20(getAddress('gOHM')).safeTransfer(msg.sender, userGohmAmount);\\n\\n        emit NewWithdraw(\\n            withdrawEpoch,\\n            strike,\\n            msg.sender,\\n            userStrikeDeposits,\\n            userGohmAmount\\n        );\\n\\n        return [userGohmAmount];\\n    }\\n\\n    /*==== PURE FUNCTIONS ====*/\\n\\n    /// @notice Calculates the monthly expiry from a solidity date\\n    /// @param timestamp Timestamp from which the monthly expiry is to be calculated\\n    /// @return The monthly expiry\\n    function getMonthlyExpiryFromTimestamp(uint256 timestamp)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 lastDay = BokkyPooBahsDateTimeLibrary.timestampFromDate(\\n            timestamp.getYear(),\\n            timestamp.getMonth() + 1,\\n            0\\n        );\\n\\n        if (lastDay.getDayOfWeek() < 5) {\\n            lastDay = BokkyPooBahsDateTimeLibrary.timestampFromDate(\\n                lastDay.getYear(),\\n                lastDay.getMonth(),\\n                lastDay.getDay() - 7\\n            );\\n        }\\n\\n        uint256 lastFridayOfMonth = BokkyPooBahsDateTimeLibrary\\n            .timestampFromDateTime(\\n                lastDay.getYear(),\\n                lastDay.getMonth(),\\n                lastDay.getDay() + 5 - lastDay.getDayOfWeek(),\\n                8,\\n                0,\\n                0\\n            );\\n\\n        if (lastFridayOfMonth <= timestamp) {\\n            uint256 temp = BokkyPooBahsDateTimeLibrary.timestampFromDate(\\n                timestamp.getYear(),\\n                timestamp.getMonth() + 2,\\n                0\\n            );\\n\\n            if (temp.getDayOfWeek() < 5) {\\n                temp = BokkyPooBahsDateTimeLibrary.timestampFromDate(\\n                    temp.getYear(),\\n                    temp.getMonth(),\\n                    temp.getDay() - 7\\n                );\\n            }\\n\\n            lastFridayOfMonth = BokkyPooBahsDateTimeLibrary\\n                .timestampFromDateTime(\\n                    temp.getYear(),\\n                    temp.getMonth(),\\n                    temp.getDay() + 5 - temp.getDayOfWeek(),\\n                    8,\\n                    0,\\n                    0\\n                );\\n        }\\n        return lastFridayOfMonth;\\n    }\\n\\n    /**\\n     * @notice Returns a concatenated string of a and b\\n     * @param a string a\\n     * @param b string b\\n     */\\n    function concatenate(string memory a, string memory b)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(abi.encodePacked(a, b));\\n    }\\n\\n    /// @notice Calculate Pnl\\n    /// @param price price of gOHM\\n    /// @param strike strike price of the the gOHM option\\n    /// @param amount amount of options\\n    function calculatePnl(\\n        uint256 price,\\n        uint256 strike,\\n        uint256 amount\\n    ) public pure returns (uint256) {\\n        return price > strike ? (((price - strike) * amount) / price) : 0;\\n    }\\n\\n    /*==== VIEWS ====*/\\n\\n    /// @notice Calculate premium for an option\\n    /// @param _strike Strike price of the option\\n    /// @param _amount Amount of options\\n    function calculatePremium(uint256 _strike, uint256 _amount)\\n        public\\n        view\\n        returns (uint256 premium)\\n    {\\n        uint256 currentPrice = getUsdPrice();\\n        premium =\\n            (IOptionPricing(getAddress('OptionPricing')).getOptionPrice(\\n                false,\\n                getMonthlyExpiryFromTimestamp(block.timestamp),\\n                _strike,\\n                currentPrice,\\n                IVolatilityOracle(getAddress('VolatilityOracle')).getVolatility()\\n            ) * _amount) /\\n            currentPrice;\\n    }\\n\\n    /// @notice Calculate Fees\\n    /// @param price price of gOHM\\n    /// @param strike strike price of the the gOHM option\\n    /// @param amount amount of options being bought\\n    function calculateFees(\\n        uint256 price,\\n        uint256 strike,\\n        uint256 amount\\n    ) public view returns (uint256) {\\n        uint256 finalFee = (purchaseFeePercentage * amount) / 1e10;\\n\\n        if (price < strike) {\\n            uint256 feeMultiplier = (((strike * 100) / (price)) - 100) + 100;\\n            finalFee = (feeMultiplier * finalFee) / 100;\\n        }\\n\\n        return finalFee;\\n    }\\n\\n    /**\\n     * @notice Returns start and end times for an epoch\\n     * @param epoch Target epoch\\n     */\\n    function getEpochTimes(uint256 epoch)\\n        public\\n        view\\n        epochGreaterThanZero(epoch)\\n        returns (uint256 start, uint256 end)\\n    {\\n        return (\\n            epochStartTimes[epoch],\\n            getMonthlyExpiryFromTimestamp(epochStartTimes[epoch])\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns epoch strikes array for an epoch\\n     * @param epoch Target epoch\\n     */\\n    function getEpochStrikes(uint256 epoch)\\n        external\\n        view\\n        epochGreaterThanZero(epoch)\\n        returns (uint256[] memory)\\n    {\\n        return epochStrikes[epoch];\\n    }\\n\\n    /**\\n     * Returns epoch strike tokens array for an epoch\\n     * @param epoch Target epoch\\n     */\\n    function getEpochStrikeTokens(uint256 epoch)\\n        external\\n        view\\n        epochGreaterThanZero(epoch)\\n        returns (address[] memory)\\n    {\\n        uint256 length = epochStrikes[epoch].length;\\n        address[] memory _epochStrikeTokens = new address[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            _epochStrikeTokens[i] = epochStrikeTokens[epoch][\\n                epochStrikes[epoch][i]\\n            ];\\n        }\\n\\n        return _epochStrikeTokens;\\n    }\\n\\n    /**\\n     * @notice Returns total epoch strike deposits array for an epoch\\n     * @param epoch Target epoch\\n     */\\n    function getTotalEpochStrikeDeposits(uint256 epoch)\\n        external\\n        view\\n        epochGreaterThanZero(epoch)\\n        returns (uint256[] memory)\\n    {\\n        uint256 length = epochStrikes[epoch].length;\\n        uint256[] memory _totalEpochStrikeDeposits = new uint256[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            _totalEpochStrikeDeposits[i] = totalEpochStrikeDeposits[epoch][\\n                epochStrikes[epoch][i]\\n            ];\\n        }\\n\\n        return _totalEpochStrikeDeposits;\\n    }\\n\\n    /**\\n     * @notice Returns user epoch deposits array for an epoch\\n     * @param epoch Target epoch\\n     * @param user Address of the user\\n     */\\n    function getUserEpochDeposits(uint256 epoch, address user)\\n        external\\n        view\\n        epochGreaterThanZero(epoch)\\n        returns (uint256[] memory)\\n    {\\n        uint256 length = epochStrikes[epoch].length;\\n        uint256[] memory _userEpochDeposits = new uint256[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            uint256 strike = epochStrikes[epoch][i];\\n            bytes32 userStrike = keccak256(abi.encodePacked(user, strike));\\n\\n            _userEpochDeposits[i] = userEpochDeposits[epoch][userStrike];\\n        }\\n\\n        return _userEpochDeposits;\\n    }\\n\\n    /**\\n     * @notice Returns total epoch calls purchased array for an epoch\\n     * @param epoch Target epoch\\n     */\\n    function getTotalEpochCallsPurchased(uint256 epoch)\\n        external\\n        view\\n        epochGreaterThanZero(epoch)\\n        returns (uint256[] memory)\\n    {\\n        uint256 length = epochStrikes[epoch].length;\\n        uint256[] memory _totalEpochCallsPurchased = new uint256[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            _totalEpochCallsPurchased[i] = totalEpochCallsPurchased[epoch][\\n                epochStrikes[epoch][i]\\n            ];\\n        }\\n\\n        return _totalEpochCallsPurchased;\\n    }\\n\\n    /**\\n     * @notice Returns user epoch calls purchased array for an epoch\\n     * @param epoch Target epoch\\n     * @param user Address of the user\\n     */\\n    function getUserEpochCallsPurchased(uint256 epoch, address user)\\n        external\\n        view\\n        epochGreaterThanZero(epoch)\\n        returns (uint256[] memory)\\n    {\\n        uint256 length = epochStrikes[epoch].length;\\n        uint256[] memory _userEpochCallsPurchased = new uint256[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            uint256 strike = epochStrikes[epoch][i];\\n            bytes32 userStrike = keccak256(abi.encodePacked(user, strike));\\n\\n            _userEpochCallsPurchased[i] = userEpochCallsPurchased[epoch][\\n                userStrike\\n            ];\\n        }\\n\\n        return _userEpochCallsPurchased;\\n    }\\n\\n    /**\\n     * @notice Returns total epoch premium array for an epoch\\n     * @param epoch Target epoch\\n     */\\n    function getTotalEpochPremium(uint256 epoch)\\n        external\\n        view\\n        epochGreaterThanZero(epoch)\\n        returns (uint256[] memory)\\n    {\\n        uint256 length = epochStrikes[epoch].length;\\n        uint256[] memory _totalEpochPremium = new uint256[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            _totalEpochPremium[i] = totalEpochPremium[epoch][\\n                epochStrikes[epoch][i]\\n            ];\\n        }\\n\\n        return _totalEpochPremium;\\n    }\\n\\n    /**\\n     * @notice Returns user epoch premium array for an epoch\\n     * @param epoch Target epoch\\n     * @param user Address of the user\\n     */\\n    function getUserEpochPremium(uint256 epoch, address user)\\n        external\\n        view\\n        epochGreaterThanZero(epoch)\\n        returns (uint256[] memory)\\n    {\\n        uint256 length = epochStrikes[epoch].length;\\n        uint256[] memory _userEpochPremium = new uint256[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            uint256 strike = epochStrikes[epoch][i];\\n            bytes32 userStrike = keccak256(abi.encodePacked(user, strike));\\n\\n            _userEpochPremium[i] = userEpochPremium[epoch][userStrike];\\n        }\\n\\n        return _userEpochPremium;\\n    }\\n\\n    /**\\n     * @notice Returns gOHM price in USD in 1e8\\n     */\\n    function getUsdPrice() public view returns (uint256 price) {\\n        return IPriceOracle(getAddress('GohmPriceOracle')).getPriceInUSD();\\n    }\\n\\n    /**\\n     * @notice Gets the address of a set contract\\n     * @param name Name of the contract\\n     * @return The address of the contract\\n     */\\n    function getAddress(bytes32 name) public view override returns (address) {\\n        return addresses[name];\\n    }\\n\\n    /*==== MODIFIERS ====*/\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == getAddress('Governance'), 'E22');\\n        _;\\n    }\\n\\n    modifier epochGreaterThanZero(uint256 epoch) {\\n        require(epoch > 0, 'E13');\\n        _;\\n    }\\n}\\n\\n// ERROR MAPPING:\\n// {\\n//   \\\"E1\\\": \\\"SSOV: Address cannot be a zero address\\\",\\n//   \\\"E2\\\": \\\"SSOV: Input lengths must match\\\",\\n//   \\\"E3\\\": \\\"SSOV: Epoch must not be expired\\\",\\n//   \\\"E4\\\": \\\"SSOV: Cannot expire epoch before epoch's expiry\\\",\\n//   \\\"E5\\\": \\\"SSOV: Already bootstrapped\\\",\\n//   \\\"E6\\\": \\\"SSOV: Strikes have not been set for next epoch\\\",\\n//   \\\"E7\\\": \\\"SSOV: Previous epoch has not expired\\\",\\n//   \\\"E8\\\": \\\"SSOV: Deposit already started\\\",\\n//   \\\"E9\\\": \\\"SSOV: Cannot set next strikes before current epoch's expiry\\\",\\n//   \\\"E10\\\": \\\"SSOV: Invalid strike index\\\",\\n//   \\\"E11\\\": \\\"SSOV: Invalid amount\\\",\\n//   \\\"E12\\\": \\\"SSOV: Invalid strike\\\",\\n//   \\\"E13\\\": \\\"SSOV: Epoch passed must be greater than 0\\\",\\n//   \\\"E14\\\": \\\"SSOV: Option must be in exercise window\\\",\\n//   \\\"E15\\\": \\\"SSOV: Cannot exercise with a smaller PnL\\\",\\n//   \\\"E16\\\": \\\"SSOV: Option token balance is not enough\\\",\\n//   \\\"E17\\\": \\\"SSOV: Epoch must be expired\\\",\\n//   \\\"E18\\\": \\\"SSOV: User strike deposit amount must be greater than zero\\\",\\n//   \\\"E19\\\": \\\"SSOV: Deposit is only available between epochs\\\",\\n//   \\\"E20\\\": \\\"SSOV: Not bootstrapped\\\",\\n//   \\\"E21\\\": \\\"SSOV: Can not call function in exercise window\\\",\\n//   \\\"E22\\\": \\\"SSOV: Caller is not governance\\\",\\n//   \\\"E23\\\": \\\"SSOV: Expire delay tolerance exceeded\\\",\\n//   \\\"E24\\\": \\\"SSOV: Cannot purchase past expiry\\\"\\n// }\\n\",\"keccak256\":\"0xa2f14031e322efa380e3b252774f13a02680dbc30dc3fcbd2fdf55c49bcd8b20\",\"license\":\"UNLICENSED\"},\"contracts/external/interfaces/IChainlinkV3Aggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IChainlinkV3Aggregator {\\n  function decimals() external view returns (uint8);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xff14f63ad3e2cc08f8e21ec573b82bfd7402f99309f62b657105c2fc6ef3a168\",\"license\":\"UNLICENSED\"},\"contracts/external/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n * NOTE: Modified to include symbols and decimals.\\n */\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x8a99c98bc4e6ba9f3de4745a15ff7828c5ddb08ed2befd62f395e12a6ebf067c\",\"license\":\"UNLICENSED\"},\"contracts/external/libraries/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n  uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n  uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n  uint256 constant SECONDS_PER_MINUTE = 60;\\n  int256 constant OFFSET19700101 = 2440588;\\n\\n  uint256 constant DOW_MON = 1;\\n  uint256 constant DOW_TUE = 2;\\n  uint256 constant DOW_WED = 3;\\n  uint256 constant DOW_THU = 4;\\n  uint256 constant DOW_FRI = 5;\\n  uint256 constant DOW_SAT = 6;\\n  uint256 constant DOW_SUN = 7;\\n\\n  // ------------------------------------------------------------------------\\n  // Calculate the number of days from 1970/01/01 to year/month/day using\\n  // the date conversion algorithm from\\n  //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n  // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n  //\\n  // days = day\\n  //      - 32075\\n  //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n  //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n  //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n  //      - offset\\n  // ------------------------------------------------------------------------\\n  function _daysFromDate(\\n    uint256 year,\\n    uint256 month,\\n    uint256 day\\n  ) internal pure returns (uint256 _days) {\\n    require(year >= 1970);\\n    int256 _year = int256(year);\\n    int256 _month = int256(month);\\n    int256 _day = int256(day);\\n\\n    int256 __days = _day -\\n      32075 +\\n      (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n      4 +\\n      (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n      12 -\\n      (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n      4 -\\n      OFFSET19700101;\\n\\n    _days = uint256(__days);\\n  }\\n\\n  // ------------------------------------------------------------------------\\n  // Calculate year/month/day from the number of days since 1970/01/01 using\\n  // the date conversion algorithm from\\n  //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n  // and adding the offset 2440588 so that 1970/01/01 is day 0\\n  //\\n  // int L = days + 68569 + offset\\n  // int N = 4 * L / 146097\\n  // L = L - (146097 * N + 3) / 4\\n  // year = 4000 * (L + 1) / 1461001\\n  // L = L - 1461 * year / 4 + 31\\n  // month = 80 * L / 2447\\n  // dd = L - 2447 * month / 80\\n  // L = month / 11\\n  // month = month + 2 - 12 * L\\n  // year = 100 * (N - 49) + year + L\\n  // ------------------------------------------------------------------------\\n  function _daysToDate(uint256 _days)\\n    internal\\n    pure\\n    returns (\\n      uint256 year,\\n      uint256 month,\\n      uint256 day\\n    )\\n  {\\n    int256 __days = int256(_days);\\n\\n    int256 L = __days + 68569 + OFFSET19700101;\\n    int256 N = (4 * L) / 146097;\\n    L = L - (146097 * N + 3) / 4;\\n    int256 _year = (4000 * (L + 1)) / 1461001;\\n    L = L - (1461 * _year) / 4 + 31;\\n    int256 _month = (80 * L) / 2447;\\n    int256 _day = L - (2447 * _month) / 80;\\n    L = _month / 11;\\n    _month = _month + 2 - 12 * L;\\n    _year = 100 * (N - 49) + _year + L;\\n\\n    year = uint256(_year);\\n    month = uint256(_month);\\n    day = uint256(_day);\\n  }\\n\\n  function timestampFromDate(\\n    uint256 year,\\n    uint256 month,\\n    uint256 day\\n  ) internal pure returns (uint256 timestamp) {\\n    timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n  }\\n\\n  function timestampFromDateTime(\\n    uint256 year,\\n    uint256 month,\\n    uint256 day,\\n    uint256 hour,\\n    uint256 minute,\\n    uint256 second\\n  ) internal pure returns (uint256 timestamp) {\\n    timestamp =\\n      _daysFromDate(year, month, day) *\\n      SECONDS_PER_DAY +\\n      hour *\\n      SECONDS_PER_HOUR +\\n      minute *\\n      SECONDS_PER_MINUTE +\\n      second;\\n  }\\n\\n  function timestampToDate(uint256 timestamp)\\n    internal\\n    pure\\n    returns (\\n      uint256 year,\\n      uint256 month,\\n      uint256 day\\n    )\\n  {\\n    (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n  }\\n\\n  function timestampToDateTime(uint256 timestamp)\\n    internal\\n    pure\\n    returns (\\n      uint256 year,\\n      uint256 month,\\n      uint256 day,\\n      uint256 hour,\\n      uint256 minute,\\n      uint256 second\\n    )\\n  {\\n    (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    uint256 secs = timestamp % SECONDS_PER_DAY;\\n    hour = secs / SECONDS_PER_HOUR;\\n    secs = secs % SECONDS_PER_HOUR;\\n    minute = secs / SECONDS_PER_MINUTE;\\n    second = secs % SECONDS_PER_MINUTE;\\n  }\\n\\n  function isValidDate(\\n    uint256 year,\\n    uint256 month,\\n    uint256 day\\n  ) internal pure returns (bool valid) {\\n    if (year >= 1970 && month > 0 && month <= 12) {\\n      uint256 daysInMonth = _getDaysInMonth(year, month);\\n      if (day > 0 && day <= daysInMonth) {\\n        valid = true;\\n      }\\n    }\\n  }\\n\\n  function isValidDateTime(\\n    uint256 year,\\n    uint256 month,\\n    uint256 day,\\n    uint256 hour,\\n    uint256 minute,\\n    uint256 second\\n  ) internal pure returns (bool valid) {\\n    if (isValidDate(year, month, day)) {\\n      if (hour < 24 && minute < 60 && second < 60) {\\n        valid = true;\\n      }\\n    }\\n  }\\n\\n  function isLeapYear(uint256 timestamp) internal pure returns (bool leapYear) {\\n    (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    leapYear = _isLeapYear(year);\\n  }\\n\\n  function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n    leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n  }\\n\\n  function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n    weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n  }\\n\\n  function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n    weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n  }\\n\\n  function getDaysInMonth(uint256 timestamp)\\n    internal\\n    pure\\n    returns (uint256 daysInMonth)\\n  {\\n    (uint256 year, uint256 month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    daysInMonth = _getDaysInMonth(year, month);\\n  }\\n\\n  function _getDaysInMonth(uint256 year, uint256 month)\\n    internal\\n    pure\\n    returns (uint256 daysInMonth)\\n  {\\n    if (\\n      month == 1 ||\\n      month == 3 ||\\n      month == 5 ||\\n      month == 7 ||\\n      month == 8 ||\\n      month == 10 ||\\n      month == 12\\n    ) {\\n      daysInMonth = 31;\\n    } else if (month != 2) {\\n      daysInMonth = 30;\\n    } else {\\n      daysInMonth = _isLeapYear(year) ? 29 : 28;\\n    }\\n  }\\n\\n  // 1 = Monday, 7 = Sunday\\n  function getDayOfWeek(uint256 timestamp)\\n    internal\\n    pure\\n    returns (uint256 dayOfWeek)\\n  {\\n    uint256 _days = timestamp / SECONDS_PER_DAY;\\n    dayOfWeek = ((_days + 3) % 7) + 1;\\n  }\\n\\n  // 1 = Monday, 7 = Sunday\\n  function getDayOfWeek(uint256 timestamp, uint256 index)\\n    internal\\n    pure\\n    returns (uint256 dayOfWeek)\\n  {\\n    uint256 _days = timestamp / SECONDS_PER_DAY;\\n    dayOfWeek = ((_days + index) % 7) + 1;\\n  }\\n\\n  function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n    (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n  }\\n\\n  function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n    (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n  }\\n\\n  function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n    (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n  }\\n\\n  function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n    uint256 secs = timestamp % SECONDS_PER_DAY;\\n    hour = secs / SECONDS_PER_HOUR;\\n  }\\n\\n  function getMinute(uint256 timestamp) internal pure returns (uint256 minute) {\\n    uint256 secs = timestamp % SECONDS_PER_HOUR;\\n    minute = secs / SECONDS_PER_MINUTE;\\n  }\\n\\n  function getSecond(uint256 timestamp) internal pure returns (uint256 second) {\\n    second = timestamp % SECONDS_PER_MINUTE;\\n  }\\n\\n  function addYears(uint256 timestamp, uint256 _years)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n      timestamp / SECONDS_PER_DAY\\n    );\\n    year += _years;\\n    uint256 daysInMonth = _getDaysInMonth(year, month);\\n    if (day > daysInMonth) {\\n      day = daysInMonth;\\n    }\\n    newTimestamp =\\n      _daysFromDate(year, month, day) *\\n      SECONDS_PER_DAY +\\n      (timestamp % SECONDS_PER_DAY);\\n    require(newTimestamp >= timestamp);\\n  }\\n\\n  function addMonths(uint256 timestamp, uint256 _months)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n      timestamp / SECONDS_PER_DAY\\n    );\\n    month += _months;\\n    year += (month - 1) / 12;\\n    month = ((month - 1) % 12) + 1;\\n    uint256 daysInMonth = _getDaysInMonth(year, month);\\n    if (day > daysInMonth) {\\n      day = daysInMonth;\\n    }\\n    newTimestamp =\\n      _daysFromDate(year, month, day) *\\n      SECONDS_PER_DAY +\\n      (timestamp % SECONDS_PER_DAY);\\n    require(newTimestamp >= timestamp);\\n  }\\n\\n  function addDays(uint256 timestamp, uint256 _days)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n    require(newTimestamp >= timestamp);\\n  }\\n\\n  function addHours(uint256 timestamp, uint256 _hours)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n    require(newTimestamp >= timestamp);\\n  }\\n\\n  function addMinutes(uint256 timestamp, uint256 _minutes)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n    require(newTimestamp >= timestamp);\\n  }\\n\\n  function addSeconds(uint256 timestamp, uint256 _seconds)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp + _seconds;\\n    require(newTimestamp >= timestamp);\\n  }\\n\\n  function subYears(uint256 timestamp, uint256 _years)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n      timestamp / SECONDS_PER_DAY\\n    );\\n    year -= _years;\\n    uint256 daysInMonth = _getDaysInMonth(year, month);\\n    if (day > daysInMonth) {\\n      day = daysInMonth;\\n    }\\n    newTimestamp =\\n      _daysFromDate(year, month, day) *\\n      SECONDS_PER_DAY +\\n      (timestamp % SECONDS_PER_DAY);\\n    require(newTimestamp <= timestamp);\\n  }\\n\\n  function subMonths(uint256 timestamp, uint256 _months)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n      timestamp / SECONDS_PER_DAY\\n    );\\n    uint256 yearMonth = year * 12 + (month - 1) - _months;\\n    year = yearMonth / 12;\\n    month = (yearMonth % 12) + 1;\\n    uint256 daysInMonth = _getDaysInMonth(year, month);\\n    if (day > daysInMonth) {\\n      day = daysInMonth;\\n    }\\n    newTimestamp =\\n      _daysFromDate(year, month, day) *\\n      SECONDS_PER_DAY +\\n      (timestamp % SECONDS_PER_DAY);\\n    require(newTimestamp <= timestamp);\\n  }\\n\\n  function subDays(uint256 timestamp, uint256 _days)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n    require(newTimestamp <= timestamp);\\n  }\\n\\n  function subHours(uint256 timestamp, uint256 _hours)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n    require(newTimestamp <= timestamp);\\n  }\\n\\n  function subMinutes(uint256 timestamp, uint256 _minutes)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n    require(newTimestamp <= timestamp);\\n  }\\n\\n  function subSeconds(uint256 timestamp, uint256 _seconds)\\n    internal\\n    pure\\n    returns (uint256 newTimestamp)\\n  {\\n    newTimestamp = timestamp - _seconds;\\n    require(newTimestamp <= timestamp);\\n  }\\n\\n  function diffYears(uint256 fromTimestamp, uint256 toTimestamp)\\n    internal\\n    pure\\n    returns (uint256 _years)\\n  {\\n    require(fromTimestamp <= toTimestamp);\\n    (uint256 fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n    (uint256 toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n    _years = toYear - fromYear;\\n  }\\n\\n  function diffMonths(uint256 fromTimestamp, uint256 toTimestamp)\\n    internal\\n    pure\\n    returns (uint256 _months)\\n  {\\n    require(fromTimestamp <= toTimestamp);\\n    (uint256 fromYear, uint256 fromMonth, ) = _daysToDate(\\n      fromTimestamp / SECONDS_PER_DAY\\n    );\\n    (uint256 toYear, uint256 toMonth, ) = _daysToDate(\\n      toTimestamp / SECONDS_PER_DAY\\n    );\\n    _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n  }\\n\\n  function diffDays(uint256 fromTimestamp, uint256 toTimestamp)\\n    internal\\n    pure\\n    returns (uint256 _days)\\n  {\\n    require(fromTimestamp <= toTimestamp);\\n    _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n  }\\n\\n  function diffHours(uint256 fromTimestamp, uint256 toTimestamp)\\n    internal\\n    pure\\n    returns (uint256 _hours)\\n  {\\n    require(fromTimestamp <= toTimestamp);\\n    _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n  }\\n\\n  function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp)\\n    internal\\n    pure\\n    returns (uint256 _minutes)\\n  {\\n    require(fromTimestamp <= toTimestamp);\\n    _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n  }\\n\\n  function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp)\\n    internal\\n    pure\\n    returns (uint256 _seconds)\\n  {\\n    require(fromTimestamp <= toTimestamp);\\n    _seconds = toTimestamp - fromTimestamp;\\n  }\\n}\\n\",\"keccak256\":\"0x4e2ca82ed3eece27bb4a0eb0577aea0839af691f9e5ed2179d59a87e3b53d8dd\",\"license\":\"UNLICENSED\"},\"contracts/external/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from '../interfaces/IERC20.sol';\\nimport {SafeMath} from '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            'SafeERC20: approve from non-zero to non-zero allowance'\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(\\n            value\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            'SafeERC20: decreased allowance below zero'\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            'SafeERC20: low-level call failed'\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                'SafeERC20: ERC20 operation did not succeed'\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x93f47d25474b00533fb8a2589aaabe366bf44107bc28486154ef9564776a9142\",\"license\":\"MIT\"},\"contracts/helper/ContractWhitelist.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\n\\n/// @title ContractWhitelist\\n/// @author witherblock\\n/// @notice A helper contract that lets you add a list of whitelisted contracts that should be able to interact with restricited functions\\nabstract contract ContractWhitelist is Ownable {\\n    /// @dev contract => whitelisted or not\\n    mapping(address => bool) public whitelistedContracts;\\n\\n    /*==== SETTERS ====*/\\n\\n    /// @dev add to the contract whitelist\\n    /// @param _contract the address of the contract to add to the contract whitelist\\n    /// @return whether the contract was successfully added to the whitelist\\n    function addToContractWhitelist(address _contract)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        require(\\n            isContract(_contract),\\n            'ContractWhitelist: Address must be a contract address'\\n        );\\n        require(\\n            !whitelistedContracts[_contract],\\n            'ContractWhitelist: Contract already whitelisted'\\n        );\\n\\n        whitelistedContracts[_contract] = true;\\n\\n        emit AddToContractWhitelist(_contract);\\n\\n        return true;\\n    }\\n\\n    /// @dev remove from  the contract whitelist\\n    /// @param _contract the address of the contract to remove from the contract whitelist\\n    /// @return whether the contract was successfully removed from the whitelist\\n    function removeFromContractWhitelist(address _contract)\\n        external\\n        returns (bool)\\n    {\\n        require(\\n            whitelistedContracts[_contract],\\n            'ContractWhitelist: Contract not whitelisted'\\n        );\\n\\n        whitelistedContracts[_contract] = false;\\n\\n        emit RemoveFromContractWhitelist(_contract);\\n\\n        return true;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    // Modifier is eligible sender modifier\\n    modifier isEligibleSender() {\\n        if (isContract(msg.sender))\\n            require(\\n                whitelistedContracts[msg.sender],\\n                'ContractWhitelist: Contract must be whitelisted'\\n            );\\n        _;\\n    }\\n\\n    /*==== VIEWS ====*/\\n\\n    /// @dev checks for contract or eoa addresses\\n    /// @param addr the address to check\\n    /// @return whether the passed address is a contract address\\n    function isContract(address addr) public view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size > 0;\\n    }\\n\\n    /*==== EVENTS ====*/\\n\\n    event AddToContractWhitelist(address indexed _contract);\\n\\n    event RemoveFromContractWhitelist(address indexed _contract);\\n}\\n\",\"keccak256\":\"0x51633aeed7e1200a631eb06946d70570493dc60f56f7c423cffe3269c8fe685d\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC20SSOV.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {ISSOV} from './ISSOV.sol';\\n\\ninterface IERC20SSOV is ISSOV {\\n    function purchase(\\n        uint256 strikeIndex,\\n        uint256 amount,\\n        address user\\n    ) external returns (uint256, uint256);\\n\\n    function deposit(\\n        uint256 strikeIndex,\\n        uint256 amount,\\n        address user\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf0956ab2e286bd64e58b188b7f5712d1dca86a4f577f7f85f829488f0f2ea880\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOptionPricing.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IOptionPricing {\\n  function getOptionPrice(\\n    bool isPut,\\n    uint256 expiry,\\n    uint256 strike,\\n    uint256 lastPrice,\\n    uint256 baseIv\\n  ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b8fc680c84fc7b324e2c5f5f3c03264ddbc367d6abe27bd3d6299120f99aee7\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISSOV.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface ISSOV {\\n    function epochStrikeTokens(uint256 epoch, uint256 strike)\\n        external\\n        view\\n        returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function currentEpoch() external view returns (uint256);\\n\\n    function epochStrikes(uint256 epoch, uint256 strikeIndex)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function settle(\\n        uint256 strikeIndex,\\n        uint256 amount,\\n        uint256 epoch\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x00b6acc16914e836a8d44bc25bb3ac182410e32fb3cee0c7c4a8858b2af3cf96\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IVolatilityOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IVolatilityOracle {\\n    function getVolatility() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2cd5f10a05cd7b40480d35450da77f8a9736f4811d54a870f76e6428343dcc72\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103825760003560e01c80637e36701f116101de578063acc3a0061161010f578063d3e3e352116100ad578063ec8568161161007c578063ec856816146108d0578063f2fde38b146108e3578063f6ac8488146108f6578063fb969b0a1461090957600080fd5b8063d3e3e35214610882578063d7e1513114610895578063db2e21bc146108b5578063ea3bd5df146108bd57600080fd5b8063bf434b7a116100e9578063bf434b7a1461081e578063c300fd6414610849578063c3d9ed391461085c578063cd653df61461086f57600080fd5b8063acc3a006146107b5578063b0f48cf7146107c8578063b12daf69146107f357600080fd5b80638dbdbe6d1161017c57806393c82c751161015657806393c82c751461073f5780639bbce47814610762578063a6fe2b9e14610782578063ab2150cf146107a257600080fd5b80638dbdbe6d146106f25780638e143ccb14610705578063901be0411461071857600080fd5b80638456cb59116101b85780638456cb591461069b57806388e18e13146106a35780638990d045146106b65780638da5cb5b146106e157600080fd5b80637e36701f146106555780638144eeba14610668578063823c15121461067b57600080fd5b80634ab01f5b116102b85780636274d49d116102565780636db29f6d116102305780636db29f6d146106125780636f56f56f1461061a578063715018a614610642578063766718081461064c57600080fd5b80636274d49d146105c3578063699f200f146105d65780636a778454146105ff57600080fd5b80635c975abb116102925780635c975abb146105895780635daa2c551461059457806361560c99146105a757806361644373146105ba57600080fd5b80634ab01f5b14610538578063574cdded1461054b5780635ba0bee11461055e57600080fd5b8063391feebb116103255780633f83b8a5116102ff5780633f83b8a514610496578063412058bd146104b9578063441a3e70146104e4578063470f42241461050457600080fd5b8063391feebb146104625780633df8cd72146104855780633f4ba83a1461048e57600080fd5b80631acf5582116103615780631acf5582146103f157806321f8a721146103f95780632807b9a81461042457806329520cae1461044f57600080fd5b806212100c1461038757806315943b99146103ad57806316279055146103cd575b600080fd5b61039a610395366004613f2d565b610911565b6040519081526020015b60405180910390f35b6103c06103bb366004613f4f565b610a85565b6040516103a49190613f68565b6103e16103db366004613fc3565b3b151590565b60405190151581526020016103a4565b61039a610b12565b61040c610407366004613f4f565b610ba4565b6040516001600160a01b0390911681526020016103a4565b61039a610432366004613f2d565b601260209081526000928352604080842090915290825290205481565b6103e161045d366004613f4f565b610bbf565b6103e1610470366004613fc3565b60036020526000908152604090205460ff1681565b61039a60055481565b6103e1610c2e565b6103e16104a4366004613f4f565b600a6020526000908152604090205460ff1681565b61039a6104c7366004613f2d565b601060209081526000928352604080842090915290825290205481565b6104f76104f2366004613f2d565b610c84565b6040516103a49190613fde565b61040c610512366004613f2d565b600c6020908152600092835260408084209091529082529020546001600160a01b031681565b6103e161054636600461405b565b610f30565b61039a6105593660046140c6565b611059565b61039a61056c366004613f2d565b601460209081526000928352604080842090915290825290205481565b60005460ff166103e1565b61039a6105a23660046140c6565b6113bd565b6103c06105b53660046140f2565b61143c565b61039a60065481565b6103c06105d13660046140f2565b611570565b61040c6105e4366004613f4f565b6007602052600090815260409020546001600160a01b031681565b6103c061060d366004613f4f565b61169a565b6103e161179b565b61062d610628366004613f4f565b611945565b604080519283526020830191909152016103a4565b61064a61198b565b005b61039a60045481565b61039a610663366004613f2d565b6119c1565b6103e16106763660046141c3565b6119f2565b61068e610689366004613f4f565b611b2a565b6040516103a49190614236565b6103e1611c42565b61039a6106b13660046140c6565b611c9c565b61039a6106c4366004613f2d565b600f60209081526000928352604080842090915290825290205481565b6002546001600160a01b031661040c565b6103e1610700366004614277565b611ccc565b61039a610713366004613f4f565b611d24565b61040c7f000000000000000000000000000000000000000000000000000000000000000081565b6103e161074d366004613f4f565b60096020526000908152604090205460ff1681565b61039a610770366004613f4f565b60156020526000908152604090205481565b61039a610790366004613f4f565b60086020526000908152604090205481565b6103e16107b0366004613f4f565b611e58565b6103e16107c3366004613fc3565b611ed5565b61039a6107d6366004613f2d565b601360209081526000928352604080842090915290825290205481565b61039a610801366004613f2d565b600d60209081526000928352604080842090915290825290205481565b61039a61082c366004613f2d565b601160209081526000928352604080842090915290825290205481565b6103c0610857366004613f4f565b612040565b6103e161086a366004613fc3565b612138565b6103c061087d366004613f4f565b612202565b6103e16108903660046142a3565b6122fa565b61039a6108a3366004613f4f565b600e6020526000908152604090205481565b6103e161249f565b61062d6108cb366004614277565b612617565b6103c06108de3660046140f2565b6129ea565b61064a6108f1366004613fc3565b612b14565b6103e1610904366004613f4f565b612baf565b6103e1612d65565b60008061091c610b12565b905080836109396c4f7074696f6e50726963696e6760981b610ba4565b6001600160a01b0316635b7b6d88600061095242611d24565b89876109706f566f6c6174696c6974794f7261636c6560801b610ba4565b6001600160a01b0316633af2888b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109a857600080fd5b505afa1580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e091906142d7565b6040516001600160e01b031960e088901b1681529415156004860152602485019390935260448401919091526064830152608482015260a40160206040518083038186803b158015610a3157600080fd5b505afa158015610a45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6991906142d7565b610a739190614306565b610a7d919061433b565b949350505050565b60608160008111610ab15760405162461bcd60e51b8152600401610aa89061434f565b60405180910390fd5b6000838152600b602090815260409182902080548351818402810184019094528084529091830182828015610b0557602002820191906000526020600020905b815481526020019060010190808311610af1575b5050505050915050919050565b6000610b2f6e476f686d50726963654f7261636c6560881b610ba4565b6001600160a01b031663e1aa60366040518163ffffffff1660e01b815260040160206040518083038186803b158015610b6757600080fd5b505afa158015610b7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9f91906142d7565b905090565b6000908152600760205260409020546001600160a01b031690565b6002546000906001600160a01b03163314610bec5760405162461bcd60e51b8152600401610aa89061436c565b60058290556040518281527f88c8f67db38a241af42dba37213346faea29bb6f89bce646dbcd9f99ee352690906020015b60405180910390a15060015b919050565b6000610c4669476f7665726e616e636560b01b610ba4565b6001600160a01b0316336001600160a01b031614610c765760405162461bcd60e51b8152600401610aa8906143a1565b610c7e6130f7565b50600190565b610c8c613eaf565b60005460ff1615610caf5760405162461bcd60e51b8152600401610aa8906143be565b60026001541415610cd25760405162461bcd60e51b8152600401610aa8906143e8565b6002600155333b15610d0d573360009081526003602052604090205460ff16610d0d5760405162461bcd60e51b8152600401610aa89061441f565b60008381526009602052604090205460ff16610d515760405162461bcd60e51b815260206004820152600360248201526245313760e81b6044820152606401610aa8565b6000838152600b60205260409020548210610d7e5760405162461bcd60e51b8152600401610aa89061446e565b6000838152600b60205260408120805484908110610d9e57610d9e61448b565b906000526020600020015490508060001415610dcc5760405162461bcd60e51b8152600401610aa8906144a1565b60003382604051602001610de19291906144be565b60408051601f1981840301815291815281516020928301206000888152600f845282812082825290935291205490915080610e445760405162461bcd60e51b815260206004820152600360248201526208a62760eb1b6044820152606401610aa8565b6000868152600d6020908152604080832086845282528083205489845260108352818420878552909252822054610e7c908490614306565b610e86919061433b565b6000888152600f602090815260408083208784529091528120559050610ec73382610eb763674f484d60e01b610ba4565b6001600160a01b0316919061318a565b60408051888152602081018690523381830152606081018490526080810183905290517fbe7586dfb192ca07af28bcc9fc95e78619abff84853e614ba95a4864e955c5929181900360a00190a16040805160208101909152908152600180559695505050505050565b6002546000906001600160a01b03163314610f5d5760405162461bcd60e51b8152600401610aa89061436c565b838214610f915760405162461bcd60e51b8152602060048201526002602482015261229960f11b6044820152606401610aa8565b60005b8481101561104d576000868683818110610fb057610fb061448b565b9050602002013590506000858584818110610fcd57610fcd61448b565b9050602002016020810190610fe29190613fc3565b60008381526007602052604080822080546001600160a01b0319166001600160a01b03851690811790915590519293509184917fb37614c7d254ea8d16eb81fa11dddaeb266aa8ba4917980859c7740aff30c69191a350508080611045906144e0565b915050610f94565b50600195945050505050565b6000805460ff161561107d5760405162461bcd60e51b8152600401610aa8906143be565b600260015414156110a05760405162461bcd60e51b8152600401610aa8906143e8565b6002600155333b156110db573360009081526003602052604090205460ff166110db5760405162461bcd60e51b8152600401610aa89061441f565b60008281526009602052604090205460ff1661111f5760405162461bcd60e51b815260206004820152600360248201526245313760e81b6044820152606401610aa8565b6000828152600b6020526040902054841061114c5760405162461bcd60e51b8152600401610aa89061446e565b6000831161116c5760405162461bcd60e51b8152600401610aa8906144fb565b6000828152600b6020526040812080548690811061118c5761118c61448b565b9060005260206000200154905080600014156111ba5760405162461bcd60e51b8152600401610aa8906144a1565b6000838152600c60209081526040808320848452909152908190205490516370a0823160e01b815233600482015285916001600160a01b0316906370a082319060240160206040518083038186803b15801561121557600080fd5b505afa158015611229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124d91906142d7565b10156112815760405162461bcd60e51b815260206004820152600360248201526222989b60e91b6044820152606401610aa8565b60008381526015602052604090205461129b908286611c9c565b9150600082116112d35760405162461bcd60e51b815260206004820152600360248201526245313560e81b6044820152606401610aa8565b6000838152600c602090815260408083208484529091529081902054905163079cc67960e41b8152336004820152602481018690526001600160a01b03909116906379cc679090604401600060405180830381600087803b15801561133757600080fd5b505af115801561134b573d6000803e3d6000fd5b505050506113643383610eb763674f484d60e01b610ba4565b60408051848152602081018390523381830152606081018690526080810184905290517f170d93e3a85ba1c08f72d2c0ebd8835178a9b9f444c318ab404506c743d925bd9181900360a00190a150600180559392505050565b6000806402540be400836005546113d49190614306565b6113de919061433b565b9050838510156114325760006064866113f78783614306565b611401919061433b565b61140b9190614518565b61141690606461452f565b905060646114248383614306565b61142e919061433b565b9150505b90505b9392505050565b6060826000811161145f5760405162461bcd60e51b8152600401610aa89061434f565b6000848152600b602052604081205490816001600160401b038111156114875761148761411e565b6040519080825280602002602001820160405280156114b0578160200160208202803683370190505b50905060005b82811015611566576000878152600b602052604081208054839081106114de576114de61448b565b90600052602060002001549050600087826040516020016115009291906144be565b60408051601f19818403018152918152815160209283012060008c8152601484528281208282529093529120548551919250908590859081106115455761154561448b565b6020026020010181815250505050808061155e906144e0565b9150506114b6565b5095945050505050565b606082600081116115935760405162461bcd60e51b8152600401610aa89061434f565b6000848152600b602052604081205490816001600160401b038111156115bb576115bb61411e565b6040519080825280602002602001820160405280156115e4578160200160208202803683370190505b50905060005b82811015611566576000878152600b602052604081208054839081106116125761161261448b565b90600052602060002001549050600087826040516020016116349291906144be565b60408051601f19818403018152918152815160209283012060008c8152600f84528281208282529093529120548551919250908590859081106116795761167961448b565b60200260200101818152505050508080611692906144e0565b9150506115ea565b606081600081116116bd5760405162461bcd60e51b8152600401610aa89061434f565b6000838152600b602052604081205490816001600160401b038111156116e5576116e561411e565b60405190808252806020026020018201604052801561170e578160200160208202803683370190505b50905060005b82811015611792576000868152601160209081526040808320600b90925282208054919291849081106117495761174961448b565b90600052602060002001548152602001908152602001600020548282815181106117755761177561448b565b60209081029190910101528061178a816144e0565b915050611714565b50949350505050565b6000805460ff16156117bf5760405162461bcd60e51b8152600401610aa8906143be565b600260015414156117e25760405162461bcd60e51b8152600401610aa8906143e8565b600260015560045460009081526009602052604090205460ff161561182e5760405162461bcd60e51b8152602060048201526002602482015261453360f01b6044820152606401610aa8565b600061183b600454611945565b915050804210156118735760405162461bcd60e51b8152602060048201526002602482015261114d60f21b6044820152606401610aa8565b600654611880908261452f565b4211156118b55760405162461bcd60e51b815260206004820152600360248201526245323360e81b6044820152606401610aa8565b6118bd610b12565b6004546000908152601560205260409020556118d960016131f2565b600480546000908152600960209081526040808320805460ff1916600117905592548083526015825291839020548351928352908201527fef3f0fea137368a87ff5898a72bbc4bd0d247388011343dd0c2f8763873429f1910160405180910390a15050600180805590565b60008082600081116119695760405162461bcd60e51b8152600401610aa89061434f565b60008481526008602052604090205461198181611d24565b9250925050915091565b6002546001600160a01b031633146119b55760405162461bcd60e51b8152600401610aa89061436c565b6119bf6000613415565b565b600b60205281600052604060002081815481106119dd57600080fd5b90600052602060002001600091509150505481565b600060026001541415611a175760405162461bcd60e51b8152600401610aa8906143e8565b60026001558251845114611a525760405162461bcd60e51b8152602060048201526002602482015261229960f11b6044820152606401610aa8565b6000805b8451811015611a9857848181518110611a7157611a7161448b565b602002602001015182611a84919061452f565b915080611a90816144e0565b915050611a56565b5060005b8551811015611af457611ae2868281518110611aba57611aba61448b565b6020026020010151868381518110611ad457611ad461448b565b602002602001015186613467565b80611aec816144e0565b915050611a9c565b50611b1c333083611b0b63674f484d60e01b610ba4565b6001600160a01b03169291906136e3565b505060018080559392505050565b60608160008111611b4d5760405162461bcd60e51b8152600401610aa89061434f565b6000838152600b602052604081205490816001600160401b03811115611b7557611b7561411e565b604051908082528060200260200182016040528015611b9e578160200160208202803683370190505b50905060005b82811015611792576000868152600c60209081526040808320600b9092528220805491929184908110611bd957611bd961448b565b9060005260206000200154815260200190815260200160002060009054906101000a90046001600160a01b0316828281518110611c1857611c1861448b565b6001600160a01b039092166020928302919091019091015280611c3a816144e0565b915050611ba4565b6000611c5a69476f7665726e616e636560b01b610ba4565b6001600160a01b0316336001600160a01b031614611c8a5760405162461bcd60e51b8152600401610aa8906143a1565b611c92613721565b610c7e60006131f2565b6000828411611cac576000611432565b8382611cb88583614518565b611cc29190614306565b611432919061433b565b600060026001541415611cf15760405162461bcd60e51b8152600401610aa8906143e8565b6002600155611d01848484613467565b611d17333085611b0b63674f484d60e01b610ba4565b5060018080559392505050565b600080611d4e611d3384613779565b611d3c85613799565b611d4790600161452f565b60006137b3565b90506005611d5b826137ce565b1015611d9357611d90611d6d82613779565b611d7683613799565b6007611d8185613802565b611d8b9190614518565b6137b3565b90505b6000611ddb611da183613779565b611daa84613799565b611db3856137ce565b611dbc86613802565b611dc790600561452f565b611dd19190614518565b6008600080613814565b9050838111611435576000611e06611df286613779565b611dfb87613799565b611d4790600261452f565b90506005611e13826137ce565b1015611e2857611e25611d6d82613779565b90505b611e4f611e3482613779565b611e3d83613799565b611e46846137ce565b611dbc85613802565b95945050505050565b6000611e7069476f7665726e616e636560b01b610ba4565b6001600160a01b0316336001600160a01b031614611ea05760405162461bcd60e51b8152600401610aa8906143a1565b60068290556040518281527f5259439c9ac2029585dd4a349897aa1e8298d26537c3b57453f275126db9191890602001610c1d565b6002546000906001600160a01b03163314611f025760405162461bcd60e51b8152600401610aa89061436c565b813b611f6e5760405162461bcd60e51b815260206004820152603560248201527f436f6e747261637457686974656c6973743a2041646472657373206d757374206044820152746265206120636f6e7472616374206164647265737360581b6064820152608401610aa8565b6001600160a01b03821660009081526003602052604090205460ff1615611fef5760405162461bcd60e51b815260206004820152602f60248201527f436f6e747261637457686974656c6973743a20436f6e747261637420616c726560448201526e18591e481dda1a5d195b1a5cdd1959608a1b6064820152608401610aa8565b6001600160a01b038216600081815260036020526040808220805460ff19166001179055517ffbd3cde7ff522a917e485c8ed2a6e87590887ab399f5ac312307903f498543079190a2506001919050565b606081600081116120635760405162461bcd60e51b8152600401610aa89061434f565b6000838152600b602052604081205490816001600160401b0381111561208b5761208b61411e565b6040519080825280602002602001820160405280156120b4578160200160208202803683370190505b50905060005b82811015611792576000868152600d60209081526040808320600b90925282208054919291849081106120ef576120ef61448b565b906000526020600020015481526020019081526020016000205482828151811061211b5761211b61448b565b602090810291909101015280612130816144e0565b9150506120ba565b6001600160a01b03811660009081526003602052604081205460ff166121b45760405162461bcd60e51b815260206004820152602b60248201527f436f6e747261637457686974656c6973743a20436f6e7472616374206e6f742060448201526a1dda1a5d195b1a5cdd195960aa1b6064820152608401610aa8565b6001600160a01b038216600081815260036020526040808220805460ff19169055517f8e81447740597754af5db3e176253a36f7981a9549f48ace3f0cb233913f9d859190a2506001919050565b606081600081116122255760405162461bcd60e51b8152600401610aa89061434f565b6000838152600b602052604081205490816001600160401b0381111561224d5761224d61411e565b604051908082528060200260200182016040528015612276578160200160208202803683370190505b50905060005b82811015611792576000868152601360209081526040808320600b90925282208054919291849081106122b1576122b161448b565b90600052602060002001548152602001908152602001600020548282815181106122dd576122dd61448b565b6020908102919091010152806122f2816144e0565b91505061227c565b6002546000906001600160a01b031633146123275760405162461bcd60e51b8152600401610aa89061436c565b60005460ff161561234a5760405162461bcd60e51b8152600401610aa8906143be565b6000600454600161235b919061452f565b6000818152600e60205260409020549091501561239f5760405162461bcd60e51b815260206004820152600260248201526108a760f31b6044820152606401610aa8565b600454156123ed5760006123b4600454611945565b9150508042116123eb5760405162461bcd60e51b8152602060048201526002602482015261453960f01b6044820152606401610aa8565b505b6000818152600b60209081526040909120845161240c92860190613ecd565b5060008181526008602052604081204290555b8351811015612495577f5185be10ef2a03e926961817be495a630ded54bceffb3ba11f6af477c9c766828285838151811061245c5761245c61448b565b602002602001015160405161247b929190918252602082015260400190565b60405180910390a18061248d816144e0565b91505061241f565b5060019392505050565b60006124b769476f7665726e616e636560b01b610ba4565b6001600160a01b0316336001600160a01b0316146124e75760405162461bcd60e51b8152600401610aa8906143a1565b60005460ff166125305760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610aa8565b600061254263674f484d60e01b610ba4565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b15801561258757600080fd5b505afa15801561259b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125bf91906142d7565b90506125d56001600160a01b038316338361318a565b60408051338152602081018390527f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd9695910160405180910390a160019250505090565b60008061262660005460ff1690565b156126435760405162461bcd60e51b8152600401610aa8906143be565b600260015414156126665760405162461bcd60e51b8152600401610aa8906143e8565b6002600155333b156126a1573360009081526003602052604090205460ff166126a15760405162461bcd60e51b8152600401610aa89061441f565b60006126ae600454611945565b9150508042106126e65760405162461bcd60e51b8152602060048201526003602482015262114c8d60ea1b6044820152606401610aa8565b6004546000908152600a602052604090205460ff1661272d5760405162461bcd60e51b815260206004820152600360248201526204532360ec1b6044820152606401610aa8565b6004546000908152600b6020526040902054861061275d5760405162461bcd60e51b8152600401610aa89061446e565b6000851161277d5760405162461bcd60e51b8152600401610aa8906144fb565b6004546000908152600b602052604081208054889081106127a0576127a061448b565b9060005260206000200154905080600014156127ce5760405162461bcd60e51b8152600401610aa8906144a1565b600085826040516020016127e39291906144be565b6040516020818303038152906040528051906020012090506000612805610b12565b90506000612813848a610911565b9050600061282283868c6113bd565b90506000612830828461452f565b60045460009081526011602090815260408083208a8452909152812080549293508d9290919061286190849061452f565b90915550506004546000908152601260209081526040808320888452909152812080548d929061289290849061452f565b90915550506004546000908152601360209081526040808320898452909152812080548592906128c390849061452f565b90915550506004546000908152601460209081526040808320888452909152812080548592906128f490849061452f565b909155506129109050333083611b0b63674f484d60e01b610ba4565b61293e61292d6d2332b2a234b9ba3934b13aba37b960911b610ba4565b83610eb763674f484d60e01b610ba4565b6004546000908152600c6020908152604080832089845290915290205461296f906001600160a01b03168b8d61318a565b600454604080519182526020820188905281018c905260608101849052608081018390526001600160a01b038b1660a08201523360c08201527f78de8c82973d11415ea2004f458680aa6d5826c3e8a798496a61db56fa66417b9060e00160405180910390a15060018055909a909950975050505050505050565b60608260008111612a0d5760405162461bcd60e51b8152600401610aa89061434f565b6000848152600b602052604081205490816001600160401b03811115612a3557612a3561411e565b604051908082528060200260200182016040528015612a5e578160200160208202803683370190505b50905060005b82811015611566576000878152600b60205260408120805483908110612a8c57612a8c61448b565b9060005260206000200154905060008782604051602001612aae9291906144be565b60408051601f19818403018152918152815160209283012060008c815260128452828120828252909352912054855191925090859085908110612af357612af361448b565b60200260200101818152505050508080612b0c906144e0565b915050612a64565b6002546001600160a01b03163314612b3e5760405162461bcd60e51b8152600401610aa89061436c565b6001600160a01b038116612ba35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610aa8565b612bac81613415565b50565b6000805460ff1615612bd35760405162461bcd60e51b8152600401610aa8906143be565b60026001541415612bf65760405162461bcd60e51b8152600401610aa8906143e8565b6002600155612c1169476f7665726e616e636560b01b610ba4565b6001600160a01b0316336001600160a01b031614612c415760405162461bcd60e51b8152600401610aa8906143a1565b60045460009081526009602052604090205460ff1615612c885760405162461bcd60e51b8152602060048201526002602482015261453360f01b6044820152606401610aa8565b6000612c95600454611945565b91505060065481612ca6919061452f565b4211612cd95760405162461bcd60e51b8152602060048201526002602482015261114d60f21b6044820152606401610aa8565b6004546000908152601560205260409020839055612cf760016131f2565b600480546000908152600960209081526040808320805460ff1916600117905592548083526015825291839020548351928352908201527fef3f0fea137368a87ff5898a72bbc4bd0d247388011343dd0c2f8763873429f1910160405180910390a150506001808055919050565b6002546000906001600160a01b03163314612d925760405162461bcd60e51b8152600401610aa89061436c565b60005460ff1615612db55760405162461bcd60e51b8152600401610aa8906143be565b60006004546001612dc6919061452f565b6000818152600a602052604090205490915060ff1615612e0d5760405162461bcd60e51b8152602060048201526002602482015261453560f01b6044820152606401610aa8565b6000818152600b6020526040902054612e4d5760405162461bcd60e51b8152602060048201526002602482015261229b60f11b6044820152606401610aa8565b60045415612e9b5760045460009081526009602052604090205460ff16612e9b5760405162461bcd60e51b8152602060048201526002602482015261453760f01b6044820152606401610aa8565b60005b6000828152600b6020526040902054811015613096576000828152600b60205260408120805483908110612ed457612ed461448b565b906000526020600020015490506000612f166040518060400160405280600981526020016819d3d2134b50d0531360ba1b815250612f1184613870565b61396d565b9050612f4181604051806040016040528060078152602001662d45504f43482d60c81b81525061396d565b9050612f5081612f1186613870565b90506000612f7d7f0000000000000000000000000000000000000000000000000000000000000000613999565b60405163266c45bb60e11b81529091506001600160a01b03821690634cd88b7690612fae908590819060040161459f565b600060405180830381600087803b158015612fc857600080fd5b505af1158015612fdc573d6000803e3d6000fd5b5050506000868152600c60209081526040808320878452825280832080546001600160a01b0319166001600160a01b038716908117909155898452600d8352818420888552909252918290205491516340c10f1960e01b8152306004820152602481019290925291506340c10f1990604401600060405180830381600087803b15801561306857600080fd5b505af115801561307c573d6000803e3d6000fd5b50505050505050808061308e906144e0565b915050612e9e565b506000818152600a602052604090819020805460ff191660011790556004829055517fb5ca1ca1b7b47549eb8af476f3ef702fc63bcd8b8c01dc163b009bb818f97997906130e79083815260200190565b60405180910390a1600191505090565b60005460ff166131405760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610aa8565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6040516001600160a01b0383166024820152604481018290526131ed90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613a31565b505050565b6004546000908152600b602090815260408083208054825181850281018501909352808352919290919083018282801561324b57602002820191906000526020600020905b815481526020019060010190808311613237575b5050505050905060005b81518110156131ed5760006132d86015600060045481526020019081526020016000205484848151811061328b5761328b61448b565b602002602001015160116000600454815260200190815260200160002060008787815181106132bc576132bc61448b565b6020026020010151815260200190815260200160002054611c9c565b905080600d6000600454815260200190815260200160002060008585815181106133045761330461448b565b60200260200101518152602001908152602001600020546133259190614518565b601060006004548152602001908152602001600020600085858151811061334e5761334e61448b565b602002602001015181526020019081526020016000208190555083156134025760136000600454815260200190815260200160002060008484815181106133975761339761448b565b602002602001015181526020019081526020016000205460106000600454815260200190815260200160002060008585815181106133d7576133d761448b565b6020026020010151815260200190815260200160002060008282546133fc919061452f565b90915550505b508061340d816144e0565b915050613255565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60005460ff161561348a5760405162461bcd60e51b8152600401610aa8906143be565b333b156134c0573360009081526003602052604090205460ff166134c05760405162461bcd60e51b8152600401610aa89061441f565b600060045460016134d1919061452f565b6004549091501561353e5760045460009081526009602052604090205460ff16801561350c57506000818152600a602052604090205460ff16155b61353e5760405162461bcd60e51b815260206004820152600360248201526245313960e81b6044820152606401610aa8565b6000818152600b6020526040902054841061356b5760405162461bcd60e51b8152600401610aa89061446e565b6000831161358b5760405162461bcd60e51b8152600401610aa8906144fb565b6000818152600b602052604081208054869081106135ab576135ab61448b565b9060005260206000200154905080600014156135d95760405162461bcd60e51b8152600401610aa8906144a1565b600083826040516020016135ee9291906144be565b60408051601f1981840301815291815281516020928301206000868152600f845282812082825290935290822080549193508792909161362f90849061452f565b90915550506000838152600d602090815260408083208584529091528120805487929061365d90849061452f565b90915550506000838152600e60205260408120805487929061368090849061452f565b909155505060408051848152602081018490529081018690526001600160a01b03851660608201523360808201527fcaa9001342572663a8f7c22e7c6f0331a45254407418d9f993ed2d1485adc2059060a00160405180910390a1505050505050565b6040516001600160a01b038085166024830152831660448201526064810182905261371b9085906323b872dd60e01b906084016131b6565b50505050565b60005460ff16156137445760405162461bcd60e51b8152600401610aa8906143be565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861316d3390565b600061379061378b620151808461433b565b613b03565b50909392505050565b60006137ab61378b620151808461433b565b509392505050565b6000620151806137c4858585613c77565b6114329190614306565b6000806137de620151808461433b565b905060076137ed82600361452f565b6137f791906145c4565b61143590600161452f565b6000610a7d61378b620151808461433b565b600081613822603c85614306565b61382e610e1087614306565b6201518061383d8b8b8b613c77565b6138479190614306565b613851919061452f565b61385b919061452f565b613865919061452f565b979650505050505050565b6060816138945750506040805180820190915260018152600360fc1b602082015290565b8160005b81156138be57806138a8816144e0565b91506138b79050600a8361433b565b9150613898565b6000816001600160401b038111156138d8576138d861411e565b6040519080825280601f01601f191660200182016040528015613902576020820181803683370190505b5090505b8415610a7d57613917600183614518565b9150613924600a866145c4565b61392f90603061452f565b60f81b8183815181106139445761394461448b565b60200101906001600160f81b031916908160001a905350613966600a8661433b565b9450613906565b606082826040516020016139829291906145d8565b604051602081830303815290604052905092915050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116610c295760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610aa8565b6000613a86826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613db49092919063ffffffff16565b8051909150156131ed5780806020019051810190613aa49190614607565b6131ed5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610aa8565b60008080838162253d8c613b1a8362010bd9614629565b613b249190614629565b9050600062023ab1613b3783600461466a565b613b4191906146ef565b90506004613b528262023ab161466a565b613b5d906003614629565b613b6791906146ef565b613b71908361471d565b9150600062164b09613b84846001614629565b613b9090610fa061466a565b613b9a91906146ef565b90506004613baa826105b561466a565b613bb491906146ef565b613bbe908461471d565b613bc990601f614629565b9250600061098f613bdb85605061466a565b613be591906146ef565b905060006050613bf78361098f61466a565b613c0191906146ef565b613c0b908661471d565b9050613c18600b836146ef565b9450613c2585600c61466a565b613c30836002614629565b613c3a919061471d565b91508483613c4960318761471d565b613c5490606461466a565b613c5e9190614629565b613c689190614629565b9a919950975095505050505050565b60006107b2841015613c8857600080fd5b838383600062253d8c60046064600c613ca2600e8861471d565b613cac91906146ef565b613cb888611324614629565b613cc29190614629565b613ccc91906146ef565b613cd790600361466a565b613ce191906146ef565b600c80613cef600e8861471d565b613cf991906146ef565b613d0490600c61466a565b613d0f60028861471d565b613d19919061471d565b613d259061016f61466a565b613d2f91906146ef565b6004600c613d3e600e8961471d565b613d4891906146ef565b613d54896112c0614629565b613d5e9190614629565b613d6a906105b561466a565b613d7491906146ef565b613d80617d4b8761471d565b613d8a9190614629565b613d949190614629565b613d9e919061471d565b613da8919061471d565b98975050505050505050565b6060611432848460008585843b613e0d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610aa8565b600080866001600160a01b03168587604051613e29919061475c565b60006040518083038185875af1925050503d8060008114613e66576040519150601f19603f3d011682016040523d82523d6000602084013e613e6b565b606091505b509150915061386582828660608315613e85575081611435565b825115613e955782518084602001fd5b8160405162461bcd60e51b8152600401610aa89190614778565b60405180602001604052806001906020820280368337509192915050565b828054828255906000526020600020908101928215613f08579160200282015b82811115613f08578251825591602001919060010190613eed565b50613f14929150613f18565b5090565b5b80821115613f145760008155600101613f19565b60008060408385031215613f4057600080fd5b50508035926020909101359150565b600060208284031215613f6157600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015613fa057835183529284019291840191600101613f84565b50909695505050505050565b80356001600160a01b0381168114610c2957600080fd5b600060208284031215613fd557600080fd5b61143582613fac565b602081810190828460005b600181101561400657815183529183019190830190600101613fe9565b5050505092915050565b60008083601f84011261402257600080fd5b5081356001600160401b0381111561403957600080fd5b6020830191508360208260051b850101111561405457600080fd5b9250929050565b6000806000806040858703121561407157600080fd5b84356001600160401b038082111561408857600080fd5b61409488838901614010565b909650945060208701359150808211156140ad57600080fd5b506140ba87828801614010565b95989497509550505050565b6000806000606084860312156140db57600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561410557600080fd5b8235915061411560208401613fac565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261414557600080fd5b813560206001600160401b03808311156141615761416161411e565b8260051b604051601f19603f830116810181811084821117156141865761418661411e565b6040529384528581018301938381019250878511156141a457600080fd5b83870191505b84821015613865578135835291830191908301906141aa565b6000806000606084860312156141d857600080fd5b83356001600160401b03808211156141ef57600080fd5b6141fb87838801614134565b9450602086013591508082111561421157600080fd5b5061421e86828701614134565b92505061422d60408501613fac565b90509250925092565b6020808252825182820181905260009190848201906040850190845b81811015613fa05783516001600160a01b031683529284019291840191600101614252565b60008060006060848603121561428c57600080fd5b833592506020840135915061422d60408501613fac565b6000602082840312156142b557600080fd5b81356001600160401b038111156142cb57600080fd5b610a7d84828501614134565b6000602082840312156142e957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615614320576143206142f0565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261434a5761434a614325565b500490565b60208082526003908201526245313360e81b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526003908201526222991960e91b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602f908201527f436f6e747261637457686974656c6973743a20436f6e7472616374206d75737460408201526e081899481dda1a5d195b1a5cdd1959608a1b606082015260800190565b60208082526003908201526204531360ec1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60208082526003908201526222989960e91b604082015260600190565b60609290921b6bffffffffffffffffffffffff19168252601482015260340190565b60006000198214156144f4576144f46142f0565b5060010190565b60208082526003908201526245313160e81b604082015260600190565b60008282101561452a5761452a6142f0565b500390565b60008219821115614542576145426142f0565b500190565b60005b8381101561456257818101518382015260200161454a565b8381111561371b5750506000910152565b6000815180845261458b816020860160208601614547565b601f01601f19169290920160200192915050565b6040815260006145b26040830185614573565b8281036020840152611e4f8185614573565b6000826145d3576145d3614325565b500690565b600083516145ea818460208801614547565b8351908301906145fe818360208801614547565b01949350505050565b60006020828403121561461957600080fd5b8151801515811461143557600080fd5b600080821280156001600160ff1b038490038513161561464b5761464b6142f0565b600160ff1b8390038412811615614664576146646142f0565b50500190565b60006001600160ff1b0381841382841380821686840486111615614690576146906142f0565b600160ff1b60008712828116878305891216156146af576146af6142f0565b600087129250878205871284841616156146cb576146cb6142f0565b878505871281841616156146e1576146e16142f0565b505050929093029392505050565b6000826146fe576146fe614325565b600160ff1b821460001984141615614718576147186142f0565b500590565b60008083128015600160ff1b85018412161561473b5761473b6142f0565b6001600160ff1b0384018313811615614756576147566142f0565b50500390565b6000825161476e818460208701614547565b9190910192915050565b602081526000611435602083018461457356fea2646970667358221220ecf3ee157ddc22254025e57d54a5cbe329856beb053c2ae5a26cde0035d65bbb64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addToContractWhitelist(address)": {
        "details": "add to the contract whitelist",
        "params": {
          "_contract": "the address of the contract to add to the contract whitelist"
        },
        "returns": {
          "_0": "whether the contract was successfully added to the whitelist"
        }
      },
      "bootstrap()": {
        "returns": {
          "_0": "Whether bootstrap was successful"
        }
      },
      "calculateFees(uint256,uint256,uint256)": {
        "params": {
          "amount": "amount of options being bought",
          "price": "price of gOHM",
          "strike": "strike price of the the gOHM option"
        }
      },
      "calculatePnl(uint256,uint256,uint256)": {
        "params": {
          "amount": "amount of options",
          "price": "price of gOHM",
          "strike": "strike price of the the gOHM option"
        }
      },
      "calculatePremium(uint256,uint256)": {
        "params": {
          "_amount": "Amount of options",
          "_strike": "Strike price of the option"
        }
      },
      "deposit(uint256,uint256,address)": {
        "params": {
          "strikeIndex": "Index of strike",
          "user": "Address of the user to deposit for"
        },
        "returns": {
          "_0": "Whether deposit was successful"
        }
      },
      "depositMultiple(uint256[],uint256[],address)": {
        "params": {
          "amounts": "Amount of gOHM to deposit into each strike index",
          "strikeIndices": "Indices of strikes to deposit into",
          "user": "Address of the user to deposit for"
        },
        "returns": {
          "_0": "Whether deposits went through successfully"
        }
      },
      "emergencyWithdraw()": {
        "details": "Can only be called by governance",
        "returns": {
          "_0": "Whether emergency withdraw was successful"
        }
      },
      "expireEpoch()": {
        "returns": {
          "_0": "Whether expire was successful"
        }
      },
      "expireEpoch(uint256)": {
        "details": "Only callable by governace in case the delay tolerance was exceeded",
        "params": {
          "settlementPrice": "The settlement price"
        },
        "returns": {
          "_0": "Whether expire was successful"
        }
      },
      "getAddress(bytes32)": {
        "params": {
          "name": "Name of the contract"
        },
        "returns": {
          "_0": "The address of the contract"
        }
      },
      "getEpochStrikeTokens(uint256)": {
        "params": {
          "epoch": "Target epoch"
        }
      },
      "getEpochStrikes(uint256)": {
        "params": {
          "epoch": "Target epoch"
        }
      },
      "getEpochTimes(uint256)": {
        "params": {
          "epoch": "Target epoch"
        }
      },
      "getMonthlyExpiryFromTimestamp(uint256)": {
        "params": {
          "timestamp": "Timestamp from which the monthly expiry is to be calculated"
        },
        "returns": {
          "_0": "The monthly expiry"
        }
      },
      "getTotalEpochCallsPurchased(uint256)": {
        "params": {
          "epoch": "Target epoch"
        }
      },
      "getTotalEpochPremium(uint256)": {
        "params": {
          "epoch": "Target epoch"
        }
      },
      "getTotalEpochStrikeDeposits(uint256)": {
        "params": {
          "epoch": "Target epoch"
        }
      },
      "getUserEpochCallsPurchased(uint256,address)": {
        "params": {
          "epoch": "Target epoch",
          "user": "Address of the user"
        }
      },
      "getUserEpochDeposits(uint256,address)": {
        "params": {
          "epoch": "Target epoch",
          "user": "Address of the user"
        }
      },
      "getUserEpochPremium(uint256,address)": {
        "params": {
          "epoch": "Target epoch",
          "user": "Address of the user"
        }
      },
      "isContract(address)": {
        "details": "checks for contract or eoa addresses",
        "params": {
          "addr": "the address to check"
        },
        "returns": {
          "_0": "whether the passed address is a contract address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Can only be called by governance",
        "returns": {
          "_0": "Whether it was successfully paused"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "purchase(uint256,uint256,address)": {
        "params": {
          "amount": "Amount of calls to purchase",
          "strikeIndex": "Strike index for current epoch",
          "user": "User to purchase options for"
        },
        "returns": {
          "_0": "Whether purchase was successful"
        }
      },
      "removeFromContractWhitelist(address)": {
        "details": "remove from  the contract whitelist",
        "params": {
          "_contract": "the address of the contract to remove from the contract whitelist"
        },
        "returns": {
          "_0": "whether the contract was successfully removed from the whitelist"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAddresses(bytes32[],address[])": {
        "params": {
          "destinations": "Addresses of the contract",
          "names": "Names of the contracts"
        },
        "returns": {
          "_0": "Whether the addresses were set"
        }
      },
      "setStrikes(uint256[])": {
        "params": {
          "strikes": "Strikes to set for next epoch"
        },
        "returns": {
          "_0": "Whether strikes were set"
        }
      },
      "settle(uint256,uint256,uint256)": {
        "params": {
          "amount": "Amount of calls to exercise",
          "strikeIndex": "Strike index for current epoch"
        },
        "returns": {
          "pnl": "pnl"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Can only be called by governance",
        "returns": {
          "_0": "Whether it was successfully unpaused"
        }
      },
      "updateExpireDelayTolerance(uint256)": {
        "details": "Can only be called by governance",
        "returns": {
          "_0": "Whether it was successfully updated"
        }
      },
      "updatePurchaseFeePercentage(uint256)": {
        "details": "Can only be called by owner",
        "params": {
          "_purchaseFeePercentage": "The new fee"
        },
        "returns": {
          "_0": "Whether it was successfully updated"
        }
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "strikeIndex": "Index of strike",
          "withdrawEpoch": "Epoch to withdraw from"
        },
        "returns": {
          "_0": "gOHM withdrawn"
        }
      }
    },
    "stateVariables": {
      "addresses": {
        "details": "The list of contract addresses the contract uses"
      },
      "currentEpoch": {
        "details": "Current epoch for ssov"
      },
      "epochStartTimes": {
        "details": "epoch => the epoch start time"
      },
      "epochStrikeTokens": {
        "details": "Mapping of (epoch => (strike => tokens))"
      },
      "epochStrikes": {
        "details": "Mapping of strikes for each epoch"
      },
      "erc20Implementation": {
        "details": "ERC20PresetMinterPauserUpgradeable implementation address"
      },
      "expireDelayTolerance": {
        "details": "Expire delay tolerance"
      },
      "isEpochExpired": {
        "details": "epoch => whether the epoch is expired"
      },
      "isVaultReady": {
        "details": "epoch => whether the vault is ready (boostrapped)"
      },
      "purchaseFeePercentage": {
        "details": "Purchase Fee: x% of the price of the underlying asset * the amount of options being bought * OTM Fee Multiplier"
      },
      "settlementPrices": {
        "details": "epoch => settlement price"
      },
      "totalEpochCallsPurchased": {
        "details": "mapping (epoch => (strike => calls purchased))"
      },
      "totalEpochDeposits": {
        "details": "mapping (epoch => deposits)"
      },
      "totalEpochPremium": {
        "details": "mapping (epoch => (strike => premium))"
      },
      "totalEpochStrikeDeposits": {
        "details": "mapping (epoch => (strike => deposits))"
      },
      "totalEpochStrikeGohmBalance": {
        "details": "mapping (epoch => (strike => balance))"
      },
      "userEpochCallsPurchased": {
        "details": "mapping (epoch => (abi.encodePacked(user, strike) => user calls purchased))"
      },
      "userEpochDeposits": {
        "details": "mapping (epoch => (abi.encodePacked(user, strike) => user deposits))"
      },
      "userEpochPremium": {
        "details": "mapping (epoch => (abi.encodePacked(user, strike) => user premium))"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bootstrap()": {
        "notice": "Bootstraps a new epoch and mints option tokens equivalent to user deposits for the epoch"
      },
      "calculateFees(uint256,uint256,uint256)": {
        "notice": "Calculate Fees"
      },
      "calculatePnl(uint256,uint256,uint256)": {
        "notice": "Calculate Pnl"
      },
      "calculatePremium(uint256,uint256)": {
        "notice": "Calculate premium for an option"
      },
      "deposit(uint256,uint256,address)": {
        "notice": "Deposits gOHM into the ssov to mint options in the next epoch for selected strikes"
      },
      "depositMultiple(uint256[],uint256[],address)": {
        "notice": "Deposit gOHM multiple times into different strike"
      },
      "emergencyWithdraw()": {
        "notice": "Transfers all funds to msg.sender"
      },
      "expireEpoch()": {
        "notice": "Sets the current epoch as expired."
      },
      "expireEpoch(uint256)": {
        "notice": "Sets the current epoch as expired."
      },
      "getAddress(bytes32)": {
        "notice": "Gets the address of a set contract"
      },
      "getEpochStrikeTokens(uint256)": {
        "notice": "Returns epoch strike tokens array for an epoch"
      },
      "getEpochStrikes(uint256)": {
        "notice": "Returns epoch strikes array for an epoch"
      },
      "getEpochTimes(uint256)": {
        "notice": "Returns start and end times for an epoch"
      },
      "getMonthlyExpiryFromTimestamp(uint256)": {
        "notice": "Calculates the monthly expiry from a solidity date"
      },
      "getTotalEpochCallsPurchased(uint256)": {
        "notice": "Returns total epoch calls purchased array for an epoch"
      },
      "getTotalEpochPremium(uint256)": {
        "notice": "Returns total epoch premium array for an epoch"
      },
      "getTotalEpochStrikeDeposits(uint256)": {
        "notice": "Returns total epoch strike deposits array for an epoch"
      },
      "getUsdPrice()": {
        "notice": "Returns gOHM price in USD in 1e8"
      },
      "getUserEpochCallsPurchased(uint256,address)": {
        "notice": "Returns user epoch calls purchased array for an epoch"
      },
      "getUserEpochDeposits(uint256,address)": {
        "notice": "Returns user epoch deposits array for an epoch"
      },
      "getUserEpochPremium(uint256,address)": {
        "notice": "Returns user epoch premium array for an epoch"
      },
      "isEpochExpired(uint256)": {
        "notice": "Is epoch expired"
      },
      "isVaultReady(uint256)": {
        "notice": "Is vault ready for next epoch"
      },
      "pause()": {
        "notice": "Pauses the vault for emergency cases"
      },
      "purchase(uint256,uint256,address)": {
        "notice": "Purchases calls for the current epoch"
      },
      "setAddresses(bytes32[],address[])": {
        "notice": "Sets (adds) a list of addresses to the address list"
      },
      "setStrikes(uint256[])": {
        "notice": "Sets strikes for next epoch"
      },
      "settle(uint256,uint256,uint256)": {
        "notice": "Settle calculates the PnL for the user with the settlement price and withdraws the PnL in gOHM to the user. Will also the burn the option tokens from the user."
      },
      "totalEpochDeposits(uint256)": {
        "notice": "Total epoch deposits across all strikes"
      },
      "totalEpochPremium(uint256,uint256)": {
        "notice": "Premium collected per strike for an epoch"
      },
      "totalEpochStrikeDeposits(uint256,uint256)": {
        "notice": "Total epoch deposits for specific strikes"
      },
      "totalEpochStrikeGohmBalance(uint256,uint256)": {
        "notice": "Epoch gOHM balance per strike after accounting for rewards"
      },
      "unpause()": {
        "notice": "Unpauses the vault"
      },
      "updateExpireDelayTolerance(uint256)": {
        "notice": "Updates the delay tolerance for the expiry epoch function"
      },
      "updatePurchaseFeePercentage(uint256)": {
        "notice": "Update the purchase fee percentage"
      },
      "userEpochCallsPurchased(uint256,bytes32)": {
        "notice": "Calls purchased by user for each strike"
      },
      "userEpochDeposits(uint256,bytes32)": {
        "notice": "Epoch deposits by user for each strike"
      },
      "userEpochPremium(uint256,bytes32)": {
        "notice": "User premium collected per strike for an epoch"
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraws balances for a strike in a completed epoch"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3585,
        "contract": "contracts/SSOV/GohmSSOV.sol:GohmSSOV",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3670,
        "contract": "contracts/SSOV/GohmSSOV.sol:GohmSSOV",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3344,
        "contract": "contracts/SSOV/GohmSSOV.sol:GohmSSOV",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 35380,
        "contract": "contracts/SSOV/GohmSSOV.sol:GohmSSOV",
        "label": "whitelistedContracts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 16758,
        "contract": "contracts/SSOV/GohmSSOV.sol:GohmSSOV",
        "label": "currentEpoch",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 16764,
        "contract": "contracts/SSOV/GohmSSOV.sol:GohmSSOV",
        "label": "purchaseFeePercentage",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 16768,
        "contract": "contracts/SSOV/GohmSSOV.sol:GohmSSOV",
        "label": "expireDelayTolerance",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 16773,
        "contract": "contracts/SSOV/GohmSSOV.sol:GohmSSOV",
        "label": "addresses",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 16778,
        "contract": "contracts/SSOV/GohmSSOV.sol:GohmSSOV",
        "label": "epochStartTimes",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 16783,
        "contract": "contracts/SSOV/GohmSSOV.sol:GohmSSOV",
        "label": "isEpochExpired",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 16788,
        "contract": "contracts/SSOV/GohmSSOV.sol:GohmSSOV",
        "label": "isVaultReady",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 16795,
        "contract": "contracts/SSOV/GohmSSOV.sol:GohmSSOV",
        "label": "epochStrikes",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 16803,
        "contract": "contracts/SSOV/GohmSSOV.sol:GohmSSOV",
        "label": "epochStrikeTokens",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 16810,
        "contract": "contracts/SSOV/GohmSSOV.sol:GohmSSOV",
        "label": "totalEpochStrikeDeposits",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 16815,
        "contract": "contracts/SSOV/GohmSSOV.sol:GohmSSOV",
        "label": "totalEpochDeposits",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 16822,
        "contract": "contracts/SSOV/GohmSSOV.sol:GohmSSOV",
        "label": "userEpochDeposits",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 16829,
        "contract": "contracts/SSOV/GohmSSOV.sol:GohmSSOV",
        "label": "totalEpochStrikeGohmBalance",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 16836,
        "contract": "contracts/SSOV/GohmSSOV.sol:GohmSSOV",
        "label": "totalEpochCallsPurchased",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 16843,
        "contract": "contracts/SSOV/GohmSSOV.sol:GohmSSOV",
        "label": "userEpochCallsPurchased",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 16850,
        "contract": "contracts/SSOV/GohmSSOV.sol:GohmSSOV",
        "label": "totalEpochPremium",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 16857,
        "contract": "contracts/SSOV/GohmSSOV.sol:GohmSSOV",
        "label": "userEpochPremium",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 16862,
        "contract": "contracts/SSOV/GohmSSOV.sol:GohmSSOV",
        "label": "settlementPrices",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}